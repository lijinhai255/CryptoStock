const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ Aave ÈÄÇÈÖçÂô®Âà∞ Sepolia ÁΩëÁªú...");

  // Ëé∑ÂèñÁΩëÁªúÈÖçÁΩÆ
  const network = await ethers.provider.getNetwork();
  console.log("üì° ÁΩëÁªú:", network.name, "Chain ID:", network.chainId);

  // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
  [deployer] = await ethers.getSigners();
  console.log("üë§ ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ:", deployer.address);

  // ÈÖçÁΩÆÂêàÁ∫¶Âú∞ÂùÄ
  const config = {
    DEFI_AGGREGATOR: '0x43C83cE19346e2148A18aE44315f03de20203ff3',
    AAVE_POOL: '0xD9553590245d3C2bd947f664DED70500C0F3455B',
    USDT_TOKEN: '0x01C8918bd02437C52ab0034A73c6Fecc448e2B5f',
    AUSDT_AAVE: '0x74D206B207f4FC04579cF7c26D8C6b4F0Ee1fA76',
    AAVE_ADAPTER: '0xc84cCaDa821939902e7f3D728440e193d6903fCb',
    MOCK_AUSDT: '0x74D206B207f4FC04579cF7c26D8C6b4F0Ee1fA76'
  };

  console.log("üìã ÂêàÁ∫¶Âú∞ÂùÄÈÖçÁΩÆ:");
  console.log("  DefiAggregator:", config.DEFI_AGGREGATOR);
  console.log("  AavePool:", config.AAVE_POOL);
  console.log("  USDT Token:", config.USDT_TOKEN);
  console.log("  aUSDT Token:", config.AUSDT_AAVE);
  console.log("  Aave Adapter:", config.AAVE_ADAPTER);

  // ÈÉ®ÁΩ≤ AaveAdapter (Â¶ÇÊûúÈúÄË¶ÅÂçáÁ∫ß)
  console.log("üîÑ ÈÉ®ÁΩ≤/ÂçáÁ∫ß Aave ÈÄÇÈÖçÂô®...");

  try {
    const AaveAdapter = await ethers.getContractFactory("AaveAdapter");
    console.log("‚úÖ Ëé∑ÂèñAaveAdapterÂêàÁ∫¶Â∑•ÂéÇÊàêÂäü");

    // Â¶ÇÊûúÈúÄË¶ÅÂàùÂßãÂåñÔºåÂèñÊ∂àÊ≥®Èáä‰∏ãÈù¢ÁöÑ‰ª£Á†Å
    // await AaveAdapter.deploy(
    //   config.AAVE_POOL,
    //   config.USDT_TOKEN,
    //   config.AUSDT_AAVE,
    //   deployer.address
    // );

    console.log("üéâ AaveAdapterÂ∑≤ÈÉ®ÁΩ≤Âà∞:", AaveAdapter.address);

    // Êõ¥Êñ∞Âú∞ÂùÄÈÖçÁΩÆ
    const newConfig = {
      ...config,
      AAVE_ADAPTER: AaveAdapter.address
    };

    // ‰øùÂ≠òÂà∞ÈÉ®ÁΩ≤Êñá‰ª∂
    const deployment = {
      network: network.name.toLowerCase(),
      chainId: network.chainId,
      deployer: deployer.address,
      timestamp: new Date().toISOString(),
      contracts: {
        DefiAggregator: config.DEFI_AGGREGATOR,
        AaveAdapter: newConfig.AAVE_ADAPTER,
        USDT_TOKEN: config.USDT_TOKEN,
        MockAavePool: config.AAVE_POOL,
        MockAToken_aUSDT: config.AUSDT_AAVE,
        AaveAdapter_Implementation: config.AAVE_ADAPTER_IMPL
      }
    };

    // ‰øùÂ≠òÈÉ®ÁΩ≤Êñá‰ª∂
    const deploymentFile = path.join(__dirname, '..', 'deployments-aave-adapter-only.json');
    fs.writeFileSync(deploymentFile, JSON.stringify(deployment, null, 2));

    console.log("‚úÖ ÈÉ®ÁΩ≤Êñá‰ª∂Â∑≤‰øùÂ≠òÂà∞:", deploymentFile);
    console.log("üìÑ ÂêàÁ∫¶Âú∞ÂùÄ:");
    console.log("  AaveAdapter:", AaveAdapter.address);

  } catch (error) {
      console.error("‚ùå ÈÉ®ÁΩ≤AaveAdapterÂ§±Ë¥•:", error);

      if (error.message.includes("not deployed")) {
        console.log("üí° ÊèêÁ§∫: ËØ∑ÂÖàÈÉ®ÁΩ≤Âü∫Á°ÄÂêàÁ∫¶:");
        console.log("   npx hardhat run scripts/deploy-infrastructure.js --network sepolia");
      }
      throw error;
    }
  }

  // È™åËØÅÈÉ®ÁΩ≤
  console.log("üîç È™åËØÅÈÉ®ÁΩ≤ÁªìÊûú...");

  try {
    // Ê£ÄÊü•DefiAggregatorÊòØÂê¶Â∑≤Ê≥®ÂÜåAaveÈÄÇÈÖçÂô®
    const defiAggregator = await ethers.getContractAt("DefiAggregator", config.DEFI_AGGREGATOR);
    const hasAdapter = await defiAggregator.hasAdapter("aave");
    console.log("üìä AaveÈÄÇÈÖçÂô®Â∑≤Ê≥®ÂÜå:", hasAdapter);

    if (hasAdapter) {
      const adapterAddress = await defiAggregator.getAdapterAddress("aave");
      console.log("üìç Â∫îÈÖçÂô®Âú∞ÂùÄ:", adapterAddress);

      // È™åËØÅÈÄÇÈÖçÂô®ÊòØÂê¶ÊîØÊåÅÊâÄÈúÄÊìç‰Ωú
      const supportsDeposit = await defiAggregator.supportsOperation(0); // DEPOSIT
      const supportsWithdraw = await defiAggregator.supportsOperation(1); // WITHDRAW
      console.log("üìä ÊîØÊåÅÂ≠òÊ¨æ:", supportsDeposit);
      console.log("üìä ÊîØÊåÅÂèñÊ¨æ:", supportsWithdraw);
    }

    // ÊµãËØïËøûÊé•
    console.log("üß™ ÊµãËØïÂêàÁ∫¶ËøûÊé•...");
    const owner = await defiAggregator.owner();
    console.log("üë§ ÂêàÁ∫¶ÊâÄÊúâËÄÖ:", owner);

    console.log("‚úÖ AaveÈÖçÁΩÆÈ™åËØÅÂÆåÊàê");

  } catch (error) {
    console.error("‚ùå È™åËØÅÂ§±Ë¥•:", error);
    throw error;
  }

  console.log("üéâ Aave ÈÄÇÈÖçÂô®ÈÉ®ÁΩ≤ÂÆåÊàê!");
  console.log("üìç ÂèØÁî®ÁöÑÂêàÁ∫¶Âú∞ÂùÄ:");
  console.log("  DefiAggregator:", config.DEFI_AGGREGATOR);
  console.log("  AaveAdapter:", config.AAVE_ADAPTER);
  console.log("  USDT Token:", config.USDT_TOKEN);
  console.log("  aUSDT Aave:", config.AUSDT_AAVE);
  console.log("  Aave Pool:", config.AAVE_POOL);

  return {
    config,
    success: true
  };
}

// ÈîôËØØÂ§ÑÁêÜ
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Êú™Â§ÑÁêÜÁöÑÈîôËØØ:', reason);
  process.exit(1);
});

// ‰∏ªÂáΩÊï∞
if (require.main === module) {
  main()
    .catch(error => {
      console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
      process.exit(1);
    });
}

module.exports = { main };