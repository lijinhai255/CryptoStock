const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤CSTokenÂêàÁ∫¶Âà∞SepoliaÊµãËØïÁΩë...\n");

    // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("üìù ÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑:", deployer.address);
    
    // Ê£ÄÊü•Ë¥¶Êà∑‰ΩôÈ¢ù
    const balance = await deployer.getBalance();
    console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.utils.formatEther(balance), "ETH");
    
    if (balance.lt(ethers.utils.parseEther("0.01"))) {
        console.log("‚ö†Ô∏è  Ë≠¶Âëä: Ë¥¶Êà∑‰ΩôÈ¢ùËæÉ‰ΩéÔºåÂèØËÉΩÊó†Ê≥ïÂÆåÊàêÈÉ®ÁΩ≤");
        console.log("   ËØ∑Á°Æ‰øùË¥¶Êà∑ÊúâË∂≥Â§üÁöÑETHÁî®‰∫éÊîØ‰ªòGasË¥πÁî®");
    }
    console.log("");

    // ÈÉ®ÁΩ≤ÂèÇÊï∞
    const tokenName = "CryptoStock Token";
    const tokenSymbol = "CSTK";
    const tokenDecimals = 18;
    const initialSupply = ethers.utils.parseEther("1000000"); // 100‰∏á‰ª£Â∏Å
    const maxSupply = ethers.utils.parseEther("10000000"); // 1000‰∏á‰ª£Â∏Å
    const owner = deployer.address;

    console.log("üìã ÈÉ®ÁΩ≤ÂèÇÊï∞:");
    console.log("  ‰ª£Â∏ÅÂêçÁß∞:", tokenName);
    console.log("  ‰ª£Â∏ÅÁ¨¶Âè∑:", tokenSymbol);
    console.log("  ‰ª£Â∏ÅÁ≤æÂ∫¶:", tokenDecimals);
    console.log("  ÂàùÂßã‰æõÂ∫îÈáè:", ethers.utils.formatEther(initialSupply));
    console.log("  ÊúÄÂ§ß‰æõÂ∫îÈáè:", ethers.utils.formatEther(maxSupply));
    console.log("  ÊâÄÊúâËÄÖ:", owner);
    console.log("");

    // ÈÉ®ÁΩ≤CSTokenÂêàÁ∫¶
    console.log("üìÑ Ê≠£Âú®ÈÉ®ÁΩ≤CSTokenÂêàÁ∫¶...");
    const CSToken = await ethers.getContractFactory("CSToken");
    
    const csToken = await CSToken.deploy(
        tokenName,
        tokenSymbol,
        tokenDecimals,
        initialSupply,
        maxSupply,
        owner
    );

    console.log("‚è≥ Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§...");
    await csToken.deployed();
    
    console.log("‚úÖ CSTokenÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
    console.log("üìç ÂêàÁ∫¶Âú∞ÂùÄ:", csToken.address);
    console.log("üîó SepoliaÊµèËßàÂô®:", `https://sepolia.etherscan.io/address/${csToken.address}`);
    console.log("");

    // È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤
    console.log("üîç È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤...");
    try {
        const tokenInfo = await csToken.getTokenInfo();
        console.log("üìä ‰ª£Â∏Å‰ø°ÊÅØÈ™åËØÅ:");
        console.log("  ÂêçÁß∞:", tokenInfo.name_);
        console.log("  Á¨¶Âè∑:", tokenInfo.symbol_);
        console.log("  Á≤æÂ∫¶:", tokenInfo.decimals_.toString());
        console.log("  ÊÄª‰æõÂ∫îÈáè:", ethers.utils.formatEther(tokenInfo.totalSupply_));
        console.log("  ÊúÄÂ§ß‰æõÂ∫îÈáè:", ethers.utils.formatEther(tokenInfo.maxSupply_));
        console.log("  Èì∏ÈÄ†ÂêØÁî®:", tokenInfo.mintingEnabled_);
        console.log("  ÈîÄÊØÅÂêØÁî®:", tokenInfo.burningEnabled_);
        console.log("  ÊöÇÂÅúÁä∂ÊÄÅ:", tokenInfo.paused_);
        console.log("  ÊâÄÊúâËÄÖ:", tokenInfo.owner_);
        console.log("");

        // Ê£ÄÊü•ÂàùÂßã‰ΩôÈ¢ù
        const ownerBalance = await csToken.balanceOf(owner);
        console.log("üí∞ ÊâÄÊúâËÄÖÂàùÂßã‰ΩôÈ¢ù:", ethers.utils.formatEther(ownerBalance));
        console.log("");

        // ÊµãËØïÂü∫Êú¨ÂäüËÉΩ
        console.log("üß™ ÊµãËØïÂü∫Êú¨ÂäüËÉΩ...");
        
        // ÊµãËØïÊöÇÂÅúÂäüËÉΩ
        await csToken.pause();
        const isPaused = await csToken.paused();
        console.log("‚úÖ ÊöÇÂÅúÂäüËÉΩÊ≠£Â∏∏:", isPaused);
        
        // ÊÅ¢Â§çÂêàÁ∫¶
        await csToken.unpause();
        const isUnpaused = await csToken.paused();
        console.log("‚úÖ ÊÅ¢Â§çÂäüËÉΩÊ≠£Â∏∏:", !isUnpaused);
        
        // ÊµãËØïÈì∏ÈÄ†ÂäüËÉΩ
        const mintAmount = ethers.utils.parseEther("1000");
        await csToken.mint(owner, mintAmount, "ÊµãËØïÈì∏ÈÄ†");
        const newBalance = await csToken.balanceOf(owner);
        console.log("‚úÖ Èì∏ÈÄ†ÂäüËÉΩÊ≠£Â∏∏ÔºåÊñ∞‰ΩôÈ¢ù:", ethers.utils.formatEther(newBalance));
        
        // ÊµãËØïÈîÄÊØÅÂäüËÉΩ
        const burnAmount = ethers.utils.parseEther("100");
        await csToken.burn(owner, burnAmount, "ÊµãËØïÈîÄÊØÅ");
        const finalBalance = await csToken.balanceOf(owner);
        console.log("‚úÖ ÈîÄÊØÅÂäüËÉΩÊ≠£Â∏∏ÔºåÊúÄÁªà‰ΩôÈ¢ù:", ethers.utils.formatEther(finalBalance));
        
        console.log("");
        console.log("üéâ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÂíåÂäüËÉΩÈ™åËØÅÂÆåÊàêÔºÅ");
        
    } catch (error) {
        console.log("‚ùå ÂêàÁ∫¶È™åËØÅÂ§±Ë¥•:", error.message);
    }

    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        network: "sepolia",
        contractName: "CSToken",
        contractAddress: csToken.address,
        deployer: deployer.address,
        deploymentTime: new Date().toISOString(),
        tokenName: tokenName,
        tokenSymbol: tokenSymbol,
        tokenDecimals: tokenDecimals,
        initialSupply: initialSupply.toString(),
        maxSupply: maxSupply.toString(),
        owner: owner,
        transactionHash: csToken.deployTransaction.hash,
        blockNumber: csToken.deployTransaction.blockNumber
    };

    console.log("üíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:");
    console.log(JSON.stringify(deploymentInfo, null, 2));
    
    // ÊèêÁ§∫ÂêéÁª≠Êìç‰Ωú
    console.log(`   ÂêàÁ∫¶Âú∞ÂùÄ: ${csToken.address}`);
    
    return csToken.address;
}

main()
    .then((address) => {
        console.log("‚úÖ ÈÉ®ÁΩ≤ËÑöÊú¨ÊâßË°åÂÆåÊàêÔºåÂêàÁ∫¶Âú∞ÂùÄ:", address);
        process.exit(0);
    })
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });
