{
  "address": "0x18AA4b07CD1246A7136C74993fB82323B8509b65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pythContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "FeedIdRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "feedId",
          "type": "bytes32"
        }
      ],
      "name": "FeedIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "feedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "batchSetFeedIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "publishTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedSymbols",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "updateData",
          "type": "bytes[]"
        }
      ],
      "name": "getUpdateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "isSymbolSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "removeFeedId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "feedId",
          "type": "bytes32"
        }
      ],
      "name": "setFeedId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedSymbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "symbolToFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "bytes[]",
          "name": "updateData",
          "type": "bytes[]"
        }
      ],
      "name": "updateAndGetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "publishTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "updateData",
          "type": "bytes[]"
        }
      ],
      "name": "updateAndGetPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "publishTimes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "updateData",
          "type": "bytes[]"
        }
      ],
      "name": "updatePriceFeeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd271f64ec37175613754889e709fda29af550de3566f37dccc28e56430181232",
  "receipt": {
    "to": null,
    "from": "0x46b43ad9F6C20c400aC17a282022E578417F796A",
    "contractAddress": "0x18AA4b07CD1246A7136C74993fB82323B8509b65",
    "transactionIndex": 35,
    "gasUsed": "1984616",
    "logsBloom": "0x
    "blockHash": "0xe964af4decb4b463012bb60cd0036df8ddf6a029feca0010cba99750bf0891be",
    "transactionHash": "0xd271f64ec37175613754889e709fda29af550de3566f37dccc28e56430181232",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 9254874,
        "transactionHash": "0xd271f64ec37175613754889e709fda29af550de3566f37dccc28e56430181232",
        "address": "0x18AA4b07CD1246A7136C74993fB82323B8509b65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046b43ad9f6c20c400ac17a282022e578417f796a"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0xe964af4decb4b463012bb60cd0036df8ddf6a029feca0010cba99750bf0891be"
      }
    ],
    "blockNumber": 9254874,
    "cumulativeGasUsed": "26500747",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDd24F84d36BF92C65F92307595335bdFab5Bbd21"
  ],
  "numDeployments": 1,
  "solcInputHash": "d27bd645ed95b2a25e0c5504903a8c5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pythContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"FeedIdRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"}],\"name\":\"FeedIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"feedIds\",\"type\":\"bytes32[]\"}],\"name\":\"batchSetFeedIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"isSymbolSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"removeFeedId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"}],\"name\":\"setFeedId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"symbolToFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updateAndGetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updateAndGetPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"publishTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"getPrice(string)\":{\"details\":\"\\u53ea\\u67e5\\u8be2\\u5df2\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\uff0c\\u4e0d\\u4f1a\\u66f4\\u65b0\\u3002\\u63a8\\u8350\\u4f7f\\u7528 updateAndGetPrices \\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\u8b66\\u544a\\uff1a\\u6b64\\u51fd\\u6570\\u8fd4\\u56de\\u7684\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u4ef7\\u683c\\uff0c\\u4ec5\\u7528\\u4e8e\\u67e5\\u8be2\\u5df2\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\u6570\\u636e\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAndGetPrice(string,bytes[])\":{\"params\":{\"symbol\":\"\\u80a1\\u7968\\u7b26\\u53f7\",\"updateData\":\"\\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\"},\"returns\":{\"maxPrice\":\"\\u6700\\u5927\\u4ef7\\u683c\\uff08+5%\\uff09\",\"minPrice\":\"\\u6700\\u5c0f\\u4ef7\\u683c\\uff08-5%\\uff09\",\"price\":\"\\u8f6c\\u6362\\u4e3a18\\u4f4d\\u5c0f\\u6570\\u7684\\u4ef7\\u683c\",\"publishTime\":\"\\u53d1\\u5e03\\u65f6\\u95f4\"}},\"updateAndGetPrices(string[],bytes[])\":{\"params\":{\"symbols\":\"\\u8981\\u67e5\\u8be2\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\u6570\\u7ec4\",\"updateData\":\"\\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\"}},\"updatePriceFeeds(bytes[])\":{\"params\":{\"updateData\":\"\\u4ece Pyth \\u7f51\\u7edc\\u83b7\\u53d6\\u7684\\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchSetFeedIds(string[],bytes32[])\":{\"notice\":\"\\u6279\\u91cf\\u8bbe\\u7f6e Feed ID\"},\"getPrice(string)\":{\"notice\":\"\\u6839\\u636e\\u80a1\\u7968\\u7b26\\u53f7\\u67e5\\u8be2\\u4ef7\\u683c\\uff08\\u4ec5\\u67e5\\u8be2\\u7248\\u672c\\uff09\"},\"getSupportedSymbols()\":{\"notice\":\"\\u83b7\\u53d6\\u6240\\u6709\\u652f\\u6301\\u7684\\u80a1\\u7968\\u7b26\\u53f7\"},\"getUpdateFee(bytes[])\":{\"notice\":\"\\u83b7\\u53d6\\u66f4\\u65b0\\u4ef7\\u683c\\u6240\\u9700\\u7684\\u8d39\\u7528\"},\"isSymbolSupported(string)\":{\"notice\":\"\\u68c0\\u67e5\\u662f\\u5426\\u652f\\u6301\\u67d0\\u4e2a\\u80a1\\u7968\\u7b26\\u53f7\"},\"updateAndGetPrice(string,bytes[])\":{\"notice\":\"\\u66f4\\u65b0\\u5e76\\u83b7\\u53d6\\u5355\\u4e2a\\u80a1\\u7968\\u7684\\u6700\\u65b0\\u4ef7\\u683c\"},\"updateAndGetPrices(string[],bytes[])\":{\"notice\":\"\\u6279\\u91cf\\u66f4\\u65b0\\u5e76\\u67e5\\u8be2\\u4ef7\\u683c\\uff08\\u63a8\\u8350\\u4f7f\\u7528\\uff09\"},\"updatePriceFeeds(bytes[])\":{\"notice\":\"\\u66f4\\u65b0\\u4ef7\\u683c\\u6570\\u636e\\uff08\\u5728\\u67e5\\u8be2\\u4ef7\\u683c\\u524d\\u8c03\\u7528\\uff09\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleAggregator.sol\":\"OracleAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Returns the required fee to update a TWAP price.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getTwapUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime,` but choose to store price updates if `storeUpdatesIfFresh`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// This method will eventually allow the caller to determine whether parsed price feeds should update\\n    /// the stored values as well.\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minAllowedPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxAllowedPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @param storeUpdatesIfFresh flag for the parse function to\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesWithConfig(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minAllowedPublishTime,\\n        uint64 maxAllowedPublishTime,\\n        bool checkUniqueness,\\n        bool checkUpdateDataIsMinimal,\\n        bool storeUpdatesIfFresh\\n    )\\n        external\\n        payable\\n        returns (\\n            PythStructs.PriceFeed[] memory priceFeeds,\\n            uint64[] memory slots\\n        );\\n\\n    /// @notice Parse time-weighted average price (TWAP) from two consecutive price updates for the given `priceIds`.\\n    ///\\n    /// This method calculates TWAP between two data points by processing the difference in cumulative price values\\n    /// divided by the time period. It requires exactly two updates that contain valid price information\\n    /// for all the requested price IDs.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the updateData array.\\n    ///\\n    /// @dev Reverts if:\\n    /// - The transferred fee is not sufficient\\n    /// - The updateData is invalid or malformed\\n    /// - The updateData array does not contain exactly 2 updates\\n    /// - There is no update for any of the given `priceIds`\\n    /// - The time ordering between data points is invalid (start time must be before end time)\\n    /// @param updateData Array containing exactly two price updates (start and end points for TWAP calculation)\\n    /// @param priceIds Array of price ids to calculate TWAP for\\n    /// @return twapPriceFeeds Array of TWAP price feeds corresponding to the given `priceIds` (with the same order)\\n    function parseTwapPriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds\\n    )\\n        external\\n        payable\\n        returns (PythStructs.TwapPriceFeed[] memory twapPriceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xada6a1f4898b056d2804409ecad466b786dc6a12bc6f8f247e7f1471c1b86fcd\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when the TWAP price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param startTime Start time of the TWAP.\\n    /// @param endTime End time of the TWAP.\\n    /// @param twapPrice Price of the TWAP.\\n    /// @param twapConf Confidence interval of the TWAP.\\n    /// @param downSlotsRatio Down slot ratio of the TWAP.\\n    event TwapPriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 startTime,\\n        uint64 endTime,\\n        int64 twapPrice,\\n        uint64 twapConf,\\n        uint32 downSlotsRatio\\n    );\\n}\\n\",\"keccak256\":\"0xd67239becd2c39bd9d065830be24e70606f5747ab31b8818bea849d09ac17ddc\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n\\n    struct TwapPriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Start time of the TWAP\\n        uint64 startTime;\\n        // End time of the TWAP\\n        uint64 endTime;\\n        // TWAP price\\n        Price twap;\\n        // Down slot ratio represents the ratio of price feed updates that were missed or unavailable\\n        // during the TWAP period, expressed as a fixed-point number between 0 and 1e6 (100%).\\n        // For example:\\n        //   - 0 means all price updates were available\\n        //   - 500_000 means 50% of updates were missed\\n        //   - 1_000_000 means all updates were missed\\n        // This can be used to assess the quality/reliability of the TWAP calculation.\\n        // Applications should define a maximum acceptable ratio (e.g. 100000 for 10%)\\n        // and revert if downSlotsRatio exceeds it.\\n        uint32 downSlotsRatio;\\n    }\\n\\n    // Information used to calculate time-weighted average prices (TWAP)\\n    struct TwapPriceInfo {\\n        // slot 1\\n        int128 cumulativePrice;\\n        uint128 cumulativeConf;\\n        // slot 2\\n        uint64 numDownSlots;\\n        uint64 publishSlot;\\n        uint64 publishTime;\\n        uint64 prevPublishTime;\\n        // slot 3\\n        int32 expo;\\n    }\\n}\\n\",\"keccak256\":\"0x474436bf0d558cc9b2c00a9d0ce318147acdf7963f34ef4acadb9248e65bbc7b\",\"license\":\"Apache-2.0\"},\"contracts/OracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OracleAggregator is Ownable {\\n    IPyth public pyth;\\n    \\n    // \\u80a1\\u7968\\u7b26\\u53f7 => Pyth Feed ID \\u6620\\u5c04\\n    mapping(string => bytes32) public symbolToFeedId;\\n    \\n    // \\u5df2\\u652f\\u6301\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\u5217\\u8868\\n    string[] public supportedSymbols;\\n    \\n    // \\u4e8b\\u4ef6\\n    event FeedIdUpdated(string indexed symbol, bytes32 feedId);\\n    event FeedIdRemoved(string indexed symbol);\\n\\n    constructor(address pythContract) Ownable(msg.sender) {\\n        pyth = IPyth(pythContract);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u80a1\\u7968\\u7b26\\u53f7\\u5bf9\\u5e94\\u7684 Feed ID\\n    function setFeedId(string memory symbol, bytes32 feedId) external onlyOwner {\\n        require(bytes(symbol).length > 0, \\\"Symbol cannot be empty\\\");\\n        require(feedId != bytes32(0), \\\"Feed ID cannot be zero\\\");\\n        \\n        // \\u5982\\u679c\\u662f\\u65b0\\u7b26\\u53f7\\uff0c\\u6dfb\\u52a0\\u5230\\u652f\\u6301\\u5217\\u8868\\n        if (symbolToFeedId[symbol] == bytes32(0)) {\\n            supportedSymbols.push(symbol);\\n        }\\n        \\n        symbolToFeedId[symbol] = feedId;\\n        emit FeedIdUpdated(symbol, feedId);\\n    }\\n    \\n    // \\u79fb\\u9664\\u80a1\\u7968\\u7b26\\u53f7\\n    function removeFeedId(string memory symbol) external onlyOwner {\\n        require(symbolToFeedId[symbol] != bytes32(0), \\\"Symbol not found\\\");\\n        \\n        symbolToFeedId[symbol] = bytes32(0);\\n        \\n        // \\u4ece\\u652f\\u6301\\u5217\\u8868\\u4e2d\\u79fb\\u9664\\n        for (uint i = 0; i < supportedSymbols.length; i++) {\\n            if (keccak256(bytes(supportedSymbols[i])) == keccak256(bytes(symbol))) {\\n                supportedSymbols[i] = supportedSymbols[supportedSymbols.length - 1];\\n                supportedSymbols.pop();\\n                break;\\n            }\\n        }\\n        \\n        emit FeedIdRemoved(symbol);\\n    }\\n\\n    /// @notice \\u6839\\u636e\\u80a1\\u7968\\u7b26\\u53f7\\u67e5\\u8be2\\u4ef7\\u683c\\uff08\\u4ec5\\u67e5\\u8be2\\u7248\\u672c\\uff09\\n    /// @dev \\u53ea\\u67e5\\u8be2\\u5df2\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\uff0c\\u4e0d\\u4f1a\\u66f4\\u65b0\\u3002\\u63a8\\u8350\\u4f7f\\u7528 updateAndGetPrices \\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\n    /// @dev \\u8b66\\u544a\\uff1a\\u6b64\\u51fd\\u6570\\u8fd4\\u56de\\u7684\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u4ef7\\u683c\\uff0c\\u4ec5\\u7528\\u4e8e\\u67e5\\u8be2\\u5df2\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\u6570\\u636e\\n    function getPrice(string memory symbol) external view returns (\\n        uint256 price, \\n        uint256 minPrice, \\n        uint256 maxPrice, \\n        uint256 publishTime\\n    ) {\\n        bytes32 feedId = symbolToFeedId[symbol];\\n        require(feedId != bytes32(0), \\\"Price feed not found for symbol\\\");\\n        \\n        // \\u83b7\\u53d6\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\u6570\\u636e\\uff08\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u7684\\uff09\\n        // \\u8981\\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\uff0c\\u8bf7\\u4f7f\\u7528 updateAndGetPrices \\u51fd\\u6570\\n        PythStructs.Price memory p = pyth.getPriceUnsafe(feedId);\\n        require(p.price > 0, \\\"Invalid price data\\\");\\n        \\n        // \\u52a8\\u6001\\u8f6c\\u6362\\u4e3a 18 \\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6\\n        // Pyth\\u4ef7\\u683c\\u683c\\u5f0f\\uff1aprice * 10^expo = \\u5b9e\\u9645\\u4ef7\\u683c\\n        // \\u6211\\u4eec\\u9700\\u8981\\u8f6c\\u6362\\u4e3a\\uff1a\\u5b9e\\u9645\\u4ef7\\u683c * 10^18\\n        \\n        uint256 absPrice = uint256(uint64(p.price)); // \\u786e\\u4fdd\\u4e3a\\u6b63\\u6570\\n        \\n        if (p.expo >= 0) {\\n            // expo >= 0: price\\u5df2\\u7ecf\\u662f\\u6574\\u6570\\uff0c\\u9700\\u8981\\u4e58\\u4ee510^expo\\uff0c\\u7136\\u540e\\u518d\\u4e58\\u4ee510^18\\n            price = absPrice * (10 ** uint256(int256(p.expo))) * 1e18;\\n        } else {\\n            // expo < 0: price\\u9700\\u8981\\u9664\\u4ee510^(-expo)\\u6765\\u5f97\\u5230\\u5b9e\\u9645\\u4ef7\\u683c\\uff0c\\u7136\\u540e\\u4e58\\u4ee510^18\\n            // \\u4e3a\\u4e86\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\uff0c\\u6211\\u4eec\\u91cd\\u65b0\\u6392\\u5217\\u8ba1\\u7b97\\u987a\\u5e8f\\n            int256 negExpo = -int256(p.expo);\\n            if (negExpo >= 18) {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5927\\u4e8e\\u7b49\\u4e8e18\\uff0c\\u7ed3\\u679c\\u4f1a\\u5f88\\u5c0f\\n                price = absPrice * 1e18 / (10 ** uint256(negExpo));\\n            } else {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5c0f\\u4e8e18\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f18\\u5316\\u8ba1\\u7b97\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\n                uint256 adjustment = 18 - uint256(negExpo);\\n                price = absPrice * (10 ** adjustment);\\n            }\\n        }\\n        \\n        // \\u7b80\\u5355\\u8bbe\\u7f6e\\u6700\\u5c0f\\u6700\\u5927\\u4ef7\\u683c\\uff08\\u53ef\\u4ee5\\u6839\\u636e\\u9700\\u8981\\u8c03\\u6574\\uff09\\n        minPrice = price * 95 / 100; // -5%\\n        maxPrice = price * 105 / 100; // +5%\\n        publishTime = p.publishTime;\\n    }\\n    \\n    /// @notice \\u66f4\\u65b0\\u5e76\\u83b7\\u53d6\\u5355\\u4e2a\\u80a1\\u7968\\u7684\\u6700\\u65b0\\u4ef7\\u683c\\n    /// @param symbol \\u80a1\\u7968\\u7b26\\u53f7\\n    /// @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n    /// @return price \\u8f6c\\u6362\\u4e3a18\\u4f4d\\u5c0f\\u6570\\u7684\\u4ef7\\u683c\\n    /// @return minPrice \\u6700\\u5c0f\\u4ef7\\u683c\\uff08-5%\\uff09\\n    /// @return maxPrice \\u6700\\u5927\\u4ef7\\u683c\\uff08+5%\\uff09\\n    /// @return publishTime \\u53d1\\u5e03\\u65f6\\u95f4\\n    function updateAndGetPrice(\\n        string memory symbol,\\n        bytes[] calldata updateData\\n    ) external payable returns (\\n        uint256 price,\\n        uint256 minPrice,\\n        uint256 maxPrice,\\n        uint256 publishTime\\n    ) {\\n        // 1. \\u66f4\\u65b0\\u94fe\\u4e0a\\u4ef7\\u683c\\n        uint fee = pyth.getUpdateFee(updateData);\\n        require(msg.value >= fee, \\\"Insufficient fee\\\");\\n        pyth.updatePriceFeeds{value: fee}(updateData);\\n        \\n        // 2. \\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\n        bytes32 feedId = symbolToFeedId[symbol];\\n        require(feedId != bytes32(0), \\\"Price feed not found for symbol\\\");\\n        \\n        PythStructs.Price memory p = pyth.getPriceUnsafe(feedId);\\n        require(p.price > 0, \\\"Invalid price data\\\");\\n        \\n        // \\u52a8\\u6001\\u8f6c\\u6362\\u4e3a 18 \\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6\\n        uint256 absPrice = uint256(uint64(p.price)); // \\u786e\\u4fdd\\u4e3a\\u6b63\\u6570\\n        \\n        if (p.expo >= 0) {\\n            // expo >= 0: price\\u5df2\\u7ecf\\u662f\\u6574\\u6570\\uff0c\\u9700\\u8981\\u4e58\\u4ee510^expo\\uff0c\\u7136\\u540e\\u518d\\u4e58\\u4ee510^18\\n            price = absPrice * (10 ** uint256(int256(p.expo))) * 1e18;\\n        } else {\\n            // expo < 0: price\\u9700\\u8981\\u9664\\u4ee510^(-expo)\\u6765\\u5f97\\u5230\\u5b9e\\u9645\\u4ef7\\u683c\\uff0c\\u7136\\u540e\\u4e58\\u4ee510^18\\n            // \\u4e3a\\u4e86\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\uff0c\\u6211\\u4eec\\u91cd\\u65b0\\u6392\\u5217\\u8ba1\\u7b97\\u987a\\u5e8f\\n            int256 negExpo = -int256(p.expo);\\n            if (negExpo >= 18) {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5927\\u4e8e\\u7b49\\u4e8e18\\uff0c\\u7ed3\\u679c\\u4f1a\\u5f88\\u5c0f\\n                price = absPrice * 1e18 / (10 ** uint256(negExpo));\\n            } else {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5c0f\\u4e8e18\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f18\\u5316\\u8ba1\\u7b97\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\n                uint256 adjustment = 18 - uint256(negExpo);\\n                price = absPrice * (10 ** adjustment);\\n            }\\n        }\\n        \\n        // \\u7b80\\u5355\\u8bbe\\u7f6e\\u6700\\u5c0f\\u6700\\u5927\\u4ef7\\u683c\\uff08\\u53ef\\u4ee5\\u6839\\u636e\\u9700\\u8981\\u8c03\\u6574\\uff09\\n        minPrice = price * 95 / 100; // -5%\\n        maxPrice = price * 105 / 100; // +5%\\n        publishTime = p.publishTime;\\n        \\n        // \\u8fd4\\u8fd8\\u591a\\u4f59\\u7684\\u8d39\\u7528\\n        if (msg.value > fee) {\\n            payable(msg.sender).transfer(msg.value - fee);\\n        }\\n    }\\n    \\n    /// @notice \\u66f4\\u65b0\\u4ef7\\u683c\\u6570\\u636e\\uff08\\u5728\\u67e5\\u8be2\\u4ef7\\u683c\\u524d\\u8c03\\u7528\\uff09\\n    /// @param updateData \\u4ece Pyth \\u7f51\\u7edc\\u83b7\\u53d6\\u7684\\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable {\\n        // \\u8ba1\\u7b97\\u66f4\\u65b0\\u8d39\\u7528\\n        uint fee = pyth.getUpdateFee(updateData);\\n        require(msg.value >= fee, \\\"Insufficient fee\\\");\\n        \\n        // \\u66f4\\u65b0\\u94fe\\u4e0a\\u4ef7\\u683c\\n        pyth.updatePriceFeeds{value: fee}(updateData);\\n        \\n        // \\u8fd4\\u8fd8\\u591a\\u4f59\\u7684\\u8d39\\u7528\\n        if (msg.value > fee) {\\n            payable(msg.sender).transfer(msg.value - fee);\\n        }\\n    }\\n    \\n    /// @notice \\u83b7\\u53d6\\u66f4\\u65b0\\u4ef7\\u683c\\u6240\\u9700\\u7684\\u8d39\\u7528\\n    function getUpdateFee(bytes[] calldata updateData) external view returns (uint256) {\\n        return pyth.getUpdateFee(updateData);\\n    }\\n    \\n    /// @notice \\u6279\\u91cf\\u66f4\\u65b0\\u5e76\\u67e5\\u8be2\\u4ef7\\u683c\\uff08\\u63a8\\u8350\\u4f7f\\u7528\\uff09\\n    /// @param symbols \\u8981\\u67e5\\u8be2\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\u6570\\u7ec4\\n    /// @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n    function updateAndGetPrices(\\n        string[] memory symbols, \\n        bytes[] calldata updateData\\n    ) external payable returns (\\n        uint256[] memory prices,\\n        uint256[] memory publishTimes\\n    ) {\\n        // 1. \\u66f4\\u65b0\\u94fe\\u4e0a\\u4ef7\\u683c\\n        uint fee = pyth.getUpdateFee(updateData);\\n        require(msg.value >= fee, \\\"Insufficient fee\\\");\\n        pyth.updatePriceFeeds{value: fee}(updateData);\\n        \\n        // 2. \\u67e5\\u8be2\\u4ef7\\u683c\\n        prices = new uint256[](symbols.length);\\n        publishTimes = new uint256[](symbols.length);\\n        \\n        for (uint i = 0; i < symbols.length; i++) {\\n            bytes32 feedId = symbolToFeedId[symbols[i]];\\n            require(feedId != bytes32(0), \\\"Price feed not found for symbol\\\");\\n            \\n            PythStructs.Price memory p = pyth.getPriceUnsafe(feedId);\\n            require(p.price > 0, \\\"Invalid price data\\\");\\n            \\n            // \\u52a8\\u6001\\u8f6c\\u6362\\u4e3a 18 \\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6\\uff08\\u4e0egetPrice\\u51fd\\u6570\\u4fdd\\u6301\\u4e00\\u81f4\\uff09\\n            uint256 absPrice = uint256(uint64(p.price)); // \\u786e\\u4fdd\\u4e3a\\u6b63\\u6570\\n            \\n            if (p.expo >= 0) {\\n                // expo >= 0: price\\u5df2\\u7ecf\\u662f\\u6574\\u6570\\uff0c\\u9700\\u8981\\u4e58\\u4ee510^expo\\uff0c\\u7136\\u540e\\u518d\\u4e58\\u4ee510^18\\n                prices[i] = absPrice * (10 ** uint256(int256(p.expo))) * 1e18;\\n            } else {\\n                // expo < 0: price\\u9700\\u8981\\u9664\\u4ee510^(-expo)\\u6765\\u5f97\\u5230\\u5b9e\\u9645\\u4ef7\\u683c\\uff0c\\u7136\\u540e\\u4e58\\u4ee510^18\\n                // \\u4e3a\\u4e86\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\uff0c\\u6211\\u4eec\\u91cd\\u65b0\\u6392\\u5217\\u8ba1\\u7b97\\u987a\\u5e8f\\n                int256 negExpo = -int256(p.expo);\\n                if (negExpo >= 18) {\\n                    // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5927\\u4e8e\\u7b49\\u4e8e18\\uff0c\\u7ed3\\u679c\\u4f1a\\u5f88\\u5c0f\\n                    prices[i] = absPrice * 1e18 / (10 ** uint256(negExpo));\\n                } else {\\n                    // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5c0f\\u4e8e18\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f18\\u5316\\u8ba1\\u7b97\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\n                    uint256 adjustment = 18 - uint256(negExpo);\\n                    prices[i] = absPrice * (10 ** adjustment);\\n                }\\n            }\\n            \\n            publishTimes[i] = p.publishTime;\\n        }\\n        \\n        // \\u8fd4\\u8fd8\\u591a\\u4f59\\u7684\\u8d39\\u7528\\n        if (msg.value > fee) {\\n            payable(msg.sender).transfer(msg.value - fee);\\n        }\\n    }\\n    \\n    /// @notice \\u83b7\\u53d6\\u6240\\u6709\\u652f\\u6301\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\n    function getSupportedSymbols() external view returns (string[] memory) {\\n        return supportedSymbols;\\n    }\\n    \\n    /// @notice \\u68c0\\u67e5\\u662f\\u5426\\u652f\\u6301\\u67d0\\u4e2a\\u80a1\\u7968\\u7b26\\u53f7\\n    function isSymbolSupported(string memory symbol) external view returns (bool) {\\n        return symbolToFeedId[symbol] != bytes32(0);\\n    }\\n    \\n    /// @notice \\u6279\\u91cf\\u8bbe\\u7f6e Feed ID\\n    function batchSetFeedIds(string[] memory symbols, bytes32[] memory feedIds) external onlyOwner {\\n        require(symbols.length == feedIds.length, \\\"Arrays length mismatch\\\");\\n        \\n        for (uint i = 0; i < symbols.length; i++) {\\n            require(bytes(symbols[i]).length > 0, \\\"Symbol cannot be empty\\\");\\n            require(feedIds[i] != bytes32(0), \\\"Feed ID cannot be zero\\\");\\n            \\n            // \\u5982\\u679c\\u662f\\u65b0\\u7b26\\u53f7\\uff0c\\u6dfb\\u52a0\\u5230\\u652f\\u6301\\u5217\\u8868\\n            if (symbolToFeedId[symbols[i]] == bytes32(0)) {\\n                supportedSymbols.push(symbols[i]);\\n            }\\n            \\n            symbolToFeedId[symbols[i]] = feedIds[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae18707c1b00307f027b251ce8f6bae9ee2216c002a3e66a0f75496792f447dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002326380380620023268339810160408190526200003491620000dd565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000066816200008d565b50600180546001600160a01b0319166001600160a01b03929092169190911790556200010f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000f057600080fd5b81516001600160a01b03811681146200010857600080fd5b9392505050565b612207806200011f6000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063ef9e5e2811610059578063ef9e5e28146102c7578063f2fde38b146102da578063f3506653146102fa578063f98d06f01461033257600080fd5b80638da5cb5b14610218578063932d68a61461024a578063ce1c0e4d14610277578063d47eed451461029957600080fd5b806364098d48116100c657806364098d48146101b05780636c06f676146101c3578063715018a6146101e35780637b459931146101f857600080fd5b806314eac4c1146100f85780634ac23d7e1461012d578063524f38891461014f5780635df9a1f81461018f575b600080fd5b34801561010457600080fd5b506101186101133660046116f0565b610352565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014d6101483660046117de565b610380565b005b34801561015b57600080fd5b5061016f61016a3660046116f0565b61058a565b604080519485526020850193909352918301526060820152608001610124565b6101a261019d3660046118e3565b610777565b604051610124929190611987565b61016f6101be3660046119b5565b610b96565b3480156101cf57600080fd5b5061014d6101de3660046116f0565b610ec4565b3480156101ef57600080fd5b5061014d611071565b34801561020457600080fd5b5061014d6102133660046119ed565b611085565b34801561022457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610124565b34801561025657600080fd5b5061026a610265366004611a31565b6111f0565b6040516101249190611a9a565b34801561028357600080fd5b5061028c61129c565b6040516101249190611aad565b3480156102a557600080fd5b506102b96102b4366004611b11565b611375565b604051908152602001610124565b61014d6102d5366004611b11565b6113f2565b3480156102e657600080fd5b5061014d6102f5366004611b52565b611532565b34801561030657600080fd5b506102b96103153660046116f0565b805160208183018101805160028252928201919093012091525481565b34801561033e57600080fd5b50600154610232906001600160a01b031681565b60008060001b6002836040516103689190611b82565b90815260200160405180910390205414159050919050565b610388611570565b80518251146103d75760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b60448201526064015b60405180910390fd5b60005b82518110156105855760008382815181106103f7576103f7611b9e565b602002602001015151116104465760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016103ce565b6000801b82828151811061045c5761045c611b9e565b6020026020010151036104aa5760405162461bcd60e51b8152602060048201526016602482015275466565642049442063616e6e6f74206265207a65726f60501b60448201526064016103ce565b6000801b60028483815181106104c2576104c2611b9e565b60200260200101516040516104d79190611b82565b9081526020016040518091039020540361052a5760038382815181106104ff576104ff611b9e565b602090810291909101810151825460018101845560009384529190922001906105289082611c3e565b505b81818151811061053c5761053c611b9e565b6020026020010151600284838151811061055857610558611b9e565b602002602001015160405161056d9190611b82565b908152604051908190036020019020556001016103da565b505050565b60008060008060006002866040516105a29190611b82565b908152604051908190036020019020549050806105d15760405162461bcd60e51b81526004016103ce90611cfd565b6001546040516396834ad360e01b8152600481018390526000916001600160a01b0316906396834ad390602401608060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190611d34565b90506000816000015160070b136106685760405162461bcd60e51b81526004016103ce90611dca565b600081600001516001600160401b031690506000826040015160030b126106bf57604082015161069c9060030b600a611ef0565b6106a69082611efc565b6106b890670de0b6b3a7640000611efc565b9650610734565b6000826040015160030b6106d290611f13565b90506012811261070a576106e781600a611ef0565b6106f983670de0b6b3a7640000611efc565b6107039190611f2f565b9750610732565b6000610717826012611f51565b905061072481600a611ef0565b61072e9084611efc565b9850505b505b606461074188605f611efc565b61074b9190611f2f565b9550606461075a886069611efc565b6107649190611f2f565b9450816060015193505050509193509193565b60015460405163d47eed4560e01b815260609182916000916001600160a01b03169063d47eed45906107af9088908890600401611f8d565b602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190612028565b9050803410156108125760405162461bcd60e51b81526004016103ce90612041565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e289083906108469089908990600401611f8d565b6000604051808303818588803b15801561085f57600080fd5b505af1158015610873573d6000803e3d6000fd5b505050505085516001600160401b038111156108915761089161163b565b6040519080825280602002602001820160405280156108ba578160200160208202803683370190505b50925085516001600160401b038111156108d6576108d661163b565b6040519080825280602002602001820160405280156108ff578160200160208202803683370190505b50915060005b8651811015610b4c576000600288838151811061092457610924611b9e565b60200260200101516040516109399190611b82565b908152604051908190036020019020549050806109685760405162461bcd60e51b81526004016103ce90611cfd565b6001546040516396834ad360e01b8152600481018390526000916001600160a01b0316906396834ad390602401608060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190611d34565b90506000816000015160070b136109ff5760405162461bcd60e51b81526004016103ce90611dca565b600081600001516001600160401b031690506000826040015160030b12610a72576040820151610a339060030b600a611ef0565b610a3d9082611efc565b610a4f90670de0b6b3a7640000611efc565b878581518110610a6157610a61611b9e565b602002602001018181525050610b1f565b6000826040015160030b610a8590611f13565b905060128112610ad957610a9a81600a611ef0565b610aac83670de0b6b3a7640000611efc565b610ab69190611f2f565b888681518110610ac857610ac8611b9e565b602002602001018181525050610b1d565b6000610ae6826012611f51565b9050610af381600a611ef0565b610afd9084611efc565b898781518110610b0f57610b0f611b9e565b602002602001018181525050505b505b8160600151868581518110610b3657610b36611b9e565b6020908102919091010152505050600101610905565b5080341115610b8d57336108fc610b638334611f51565b6040518115909202916000818181858888f19350505050158015610b8b573d6000803e3d6000fd5b505b50935093915050565b60015460405163d47eed4560e01b815260009182918291829182916001600160a01b03169063d47eed4590610bd1908a908a90600401611f8d565b602060405180830381865afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190612028565b905080341015610c345760405162461bcd60e51b81526004016103ce90612041565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e28908390610c68908b908b90600401611f8d565b6000604051808303818588803b158015610c8157600080fd5b505af1158015610c95573d6000803e3d6000fd5b50505050506000600289604051610cac9190611b82565b90815260405190819003602001902054905080610cdb5760405162461bcd60e51b81526004016103ce90611cfd565b6001546040516396834ad360e01b8152600481018390526000916001600160a01b0316906396834ad390602401608060405180830381865afa158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190611d34565b90506000816000015160070b13610d725760405162461bcd60e51b81526004016103ce90611dca565b600081600001516001600160401b031690506000826040015160030b12610dc9576040820151610da69060030b600a611ef0565b610db09082611efc565b610dc290670de0b6b3a7640000611efc565b9750610e3e565b6000826040015160030b610ddc90611f13565b905060128112610e1457610df181600a611ef0565b610e0383670de0b6b3a7640000611efc565b610e0d9190611f2f565b9850610e3c565b6000610e21826012611f51565b9050610e2e81600a611ef0565b610e389084611efc565b9950505b505b6064610e4b89605f611efc565b610e559190611f2f565b96506064610e64896069611efc565b610e6e9190611f2f565b95508160600151945083341115610eb757336108fc610e8d8634611f51565b6040518115909202916000818181858888f19350505050158015610eb5573d6000803e3d6000fd5b505b5050505093509350935093565b610ecc611570565b6000801b600282604051610ee09190611b82565b90815260200160405180910390205403610f2f5760405162461bcd60e51b815260206004820152601060248201526f14de5b589bdb081b9bdd08199bdd5b9960821b60448201526064016103ce565b6000801b600282604051610f439190611b82565b9081526040519081900360200190205560005b60035481101561102f57818051906020012060038281548110610f7b57610f7b611b9e565b90600052602060002001604051610f92919061206b565b6040518091039020036110275760038054610faf90600190611f51565b81548110610fbf57610fbf611b9e565b9060005260206000200160038281548110610fdc57610fdc611b9e565b906000526020600020019081610ff291906120e1565b506003805480611004576110046121bb565b60019003818190600052602060002001600061102091906115ed565b905561102f565b600101610f56565b508060405161103e9190611b82565b604051908190038120907f67f0eb67f5464265f0a87b8fcd08b9d7326c3f2c00e5bb6b3d465c82ec08080a90600090a250565b611079611570565b611083600061159d565b565b61108d611570565b60008251116110d75760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016103ce565b8061111d5760405162461bcd60e51b8152602060048201526016602482015275466565642049442063616e6e6f74206265207a65726f60501b60448201526064016103ce565b6000801b6002836040516111319190611b82565b9081526020016040518091039020540361118357600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b016111818382611c3e565b505b806002836040516111949190611b82565b908152604051908190036020018120919091556111b2908390611b82565b604051908190038120828252907f526259d6e9ade7fe0153ca3e878866dfab9366af7f492259a1345543b0c2b2689060200160405180910390a25050565b6003818154811061120057600080fd5b90600052602060002001600091509050805461121b90611bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461124790611bb4565b80156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b505050505081565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561136c5783829060005260206000200180546112df90611bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461130b90611bb4565b80156113585780601f1061132d57610100808354040283529160200191611358565b820191906000526020600020905b81548152906001019060200180831161133b57829003601f168201915b5050505050815260200190600101906112c0565b50505050905090565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed45906113a89086908690600401611f8d565b602060405180830381865afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e99190612028565b90505b92915050565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed45906114259086908690600401611f8d565b602060405180830381865afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612028565b9050803410156114885760405162461bcd60e51b81526004016103ce90612041565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e289083906114bc9087908790600401611f8d565b6000604051808303818588803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b50505050508034111561058557336108fc6115048334611f51565b6040518115909202916000818181858888f1935050505015801561152c573d6000803e3d6000fd5b50505050565b61153a611570565b6001600160a01b03811661156457604051631e4fbdf760e01b8152600060048201526024016103ce565b61156d8161159d565b50565b6000546001600160a01b031633146110835760405163118cdaa760e01b81523360048201526024016103ce565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546115f990611bb4565b6000825580601f10611609575050565b601f01602090049060005260206000209081019061156d91905b808211156116375760008155600101611623565b5090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156116795761167961163b565b604052919050565b600082601f83011261169257600080fd5b81356001600160401b038111156116ab576116ab61163b565b6116be601f8201601f1916602001611651565b8181528460208386010111156116d357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561170257600080fd5b81356001600160401b0381111561171857600080fd5b61172484828501611681565b949350505050565b60006001600160401b038211156117455761174561163b565b5060051b60200190565b600082601f83011261176057600080fd5b813560206117756117708361172c565b611651565b82815260059290921b8401810191818101908684111561179457600080fd5b8286015b848110156117d35780356001600160401b038111156117b75760008081fd5b6117c58986838b0101611681565b845250918301918301611798565b509695505050505050565b600080604083850312156117f157600080fd5b82356001600160401b038082111561180857600080fd5b6118148683870161174f565b935060209150818501358181111561182b57600080fd5b85019050601f8101861361183e57600080fd5b803561184c6117708261172c565b81815260059190911b8201830190838101908883111561186b57600080fd5b928401925b8284101561188957833582529284019290840190611870565b80955050505050509250929050565b60008083601f8401126118aa57600080fd5b5081356001600160401b038111156118c157600080fd5b6020830191508360208260051b85010111156118dc57600080fd5b9250929050565b6000806000604084860312156118f857600080fd5b83356001600160401b038082111561190f57600080fd5b61191b8783880161174f565b9450602086013591508082111561193157600080fd5b5061193e86828701611898565b9497909650939450505050565b60008151808452602080850194506020840160005b8381101561197c57815187529582019590820190600101611960565b509495945050505050565b60408152600061199a604083018561194b565b82810360208401526119ac818561194b565b95945050505050565b6000806000604084860312156119ca57600080fd5b83356001600160401b03808211156119e157600080fd5b61191b87838801611681565b60008060408385031215611a0057600080fd5b82356001600160401b03811115611a1657600080fd5b611a2285828601611681565b95602094909401359450505050565b600060208284031215611a4357600080fd5b5035919050565b60005b83811015611a65578181015183820152602001611a4d565b50506000910152565b60008151808452611a86816020860160208601611a4a565b601f01601f19169290920160200192915050565b6020815260006113e96020830184611a6e565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611b0457603f19888603018452611af2858351611a6e565b94509285019290850190600101611ad6565b5092979650505050505050565b60008060208385031215611b2457600080fd5b82356001600160401b03811115611b3a57600080fd5b611b4685828601611898565b90969095509350505050565b600060208284031215611b6457600080fd5b81356001600160a01b0381168114611b7b57600080fd5b9392505050565b60008251611b94818460208701611a4a565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611bc857607f821691505b602082108103611be857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610585576000816000526020600020601f850160051c81016020861015611c175750805b601f850160051c820191505b81811015611c3657828155600101611c23565b505050505050565b81516001600160401b03811115611c5757611c5761163b565b611c6b81611c658454611bb4565b84611bee565b602080601f831160018114611ca05760008415611c885750858301515b600019600386901b1c1916600185901b178555611c36565b600085815260208120601f198616915b82811015611ccf57888601518255948401946001909101908401611cb0565b5085821015611ced5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601f908201527f50726963652066656564206e6f7420666f756e6420666f722073796d626f6c00604082015260600190565b600060808284031215611d4657600080fd5b604051608081016001600160401b038282108183111715611d6957611d6961163b565b81604052845191508160070b8214611d8057600080fd5b9082526020840151908082168214611d9757600080fd5b5060208201526040830151600381900b8114611db257600080fd5b60408201526060928301519281019290925250919050565b602080825260129082015271496e76616c6964207072696365206461746160701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611e47578160001904821115611e2d57611e2d611df6565b80851615611e3a57918102915b93841c9390800290611e11565b509250929050565b600082611e5e575060016113ec565b81611e6b575060006113ec565b8160018114611e815760028114611e8b57611ea7565b60019150506113ec565b60ff841115611e9c57611e9c611df6565b50506001821b6113ec565b5060208310610133831016604e8410600b8410161715611eca575081810a6113ec565b611ed48383611e0c565b8060001904821115611ee857611ee8611df6565b029392505050565b60006113e98383611e4f565b80820281158282048414176113ec576113ec611df6565b6000600160ff1b8201611f2857611f28611df6565b5060000390565b600082611f4c57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113ec576113ec611df6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b8781101561201b57868403603f190183528135368a9003601e19018112611fd257600080fd5b890185810190356001600160401b03811115611fed57600080fd5b803603821315611ffc57600080fd5b612007868284611f64565b955050509184019190840190600101611fac565b5091979650505050505050565b60006020828403121561203a57600080fd5b5051919050565b60208082526010908201526f496e73756666696369656e742066656560801b604082015260600190565b600080835461207981611bb4565b6001828116801561209157600181146120a6576120d5565b60ff19841687528215158302870194506120d5565b8760005260208060002060005b858110156120cc5781548a8201529084019082016120b3565b50505082870194505b50929695505050505050565b8181036120ec575050565b6120f68254611bb4565b6001600160401b0381111561210d5761210d61163b565b61211b81611c658454611bb4565b6000601f82116001811461214f57600083156121375750848201545b600019600385901b1c1916600184901b1784556121b4565b600085815260209020601f19841690600086815260209020845b838110156121895782860154825560019586019590910190602001612169565b50858310156121a75781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e2de359228dc6ac2b5dbfd59d043d55d50cb2b31311f7016ed03707e1a28877664736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063ef9e5e2811610059578063ef9e5e28146102c7578063f2fde38b146102da578063f3506653146102fa578063f98d06f01461033257600080fd5b80638da5cb5b14610218578063932d68a61461024a578063ce1c0e4d14610277578063d47eed451461029957600080fd5b806364098d48116100c657806364098d48146101b05780636c06f676146101c3578063715018a6146101e35780637b459931146101f857600080fd5b806314eac4c1146100f85780634ac23d7e1461012d578063524f38891461014f5780635df9a1f81461018f575b600080fd5b34801561010457600080fd5b506101186101133660046116f0565b610352565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014d6101483660046117de565b610380565b005b34801561015b57600080fd5b5061016f61016a3660046116f0565b61058a565b604080519485526020850193909352918301526060820152608001610124565b6101a261019d3660046118e3565b610777565b604051610124929190611987565b61016f6101be3660046119b5565b610b96565b3480156101cf57600080fd5b5061014d6101de3660046116f0565b610ec4565b3480156101ef57600080fd5b5061014d611071565b34801561020457600080fd5b5061014d6102133660046119ed565b611085565b34801561022457600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610124565b34801561025657600080fd5b5061026a610265366004611a31565b6111f0565b6040516101249190611a9a565b34801561028357600080fd5b5061028c61129c565b6040516101249190611aad565b3480156102a557600080fd5b506102b96102b4366004611b11565b611375565b604051908152602001610124565b61014d6102d5366004611b11565b6113f2565b3480156102e657600080fd5b5061014d6102f5366004611b52565b611532565b34801561030657600080fd5b506102b96103153660046116f0565b805160208183018101805160028252928201919093012091525481565b34801561033e57600080fd5b50600154610232906001600160a01b031681565b60008060001b6002836040516103689190611b82565b90815260200160405180910390205414159050919050565b610388611570565b80518251146103d75760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b60448201526064015b60405180910390fd5b60005b82518110156105855760008382815181106103f7576103f7611b9e565b602002602001015151116104465760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016103ce565b6000801b82828151811061045c5761045c611b9e565b6020026020010151036104aa5760405162461bcd60e51b8152602060048201526016602482015275466565642049442063616e6e6f74206265207a65726f60501b60448201526064016103ce565b6000801b60028483815181106104c2576104c2611b9e565b60200260200101516040516104d79190611b82565b9081526020016040518091039020540361052a5760038382815181106104ff576104ff611b9e565b602090810291909101810151825460018101845560009384529190922001906105289082611c3e565b505b81818151811061053c5761053c611b9e565b6020026020010151600284838151811061055857610558611b9e565b602002602001015160405161056d9190611b82565b908152604051908190036020019020556001016103da565b505050565b60008060008060006002866040516105a29190611b82565b908152604051908190036020019020549050806105d15760405162461bcd60e51b81526004016103ce90611cfd565b6001546040516396834ad360e01b8152600481018390526000916001600160a01b0316906396834ad390602401608060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190611d34565b90506000816000015160070b136106685760405162461bcd60e51b81526004016103ce90611dca565b600081600001516001600160401b031690506000826040015160030b126106bf57604082015161069c9060030b600a611ef0565b6106a69082611efc565b6106b890670de0b6b3a7640000611efc565b9650610734565b6000826040015160030b6106d290611f13565b90506012811261070a576106e781600a611ef0565b6106f983670de0b6b3a7640000611efc565b6107039190611f2f565b9750610732565b6000610717826012611f51565b905061072481600a611ef0565b61072e9084611efc565b9850505b505b606461074188605f611efc565b61074b9190611f2f565b9550606461075a886069611efc565b6107649190611f2f565b9450816060015193505050509193509193565b60015460405163d47eed4560e01b815260609182916000916001600160a01b03169063d47eed45906107af9088908890600401611f8d565b602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190612028565b9050803410156108125760405162461bcd60e51b81526004016103ce90612041565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e289083906108469089908990600401611f8d565b6000604051808303818588803b15801561085f57600080fd5b505af1158015610873573d6000803e3d6000fd5b505050505085516001600160401b038111156108915761089161163b565b6040519080825280602002602001820160405280156108ba578160200160208202803683370190505b50925085516001600160401b038111156108d6576108d661163b565b6040519080825280602002602001820160405280156108ff578160200160208202803683370190505b50915060005b8651811015610b4c576000600288838151811061092457610924611b9e565b60200260200101516040516109399190611b82565b908152604051908190036020019020549050806109685760405162461bcd60e51b81526004016103ce90611cfd565b6001546040516396834ad360e01b8152600481018390526000916001600160a01b0316906396834ad390602401608060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190611d34565b90506000816000015160070b136109ff5760405162461bcd60e51b81526004016103ce90611dca565b600081600001516001600160401b031690506000826040015160030b12610a72576040820151610a339060030b600a611ef0565b610a3d9082611efc565b610a4f90670de0b6b3a7640000611efc565b878581518110610a6157610a61611b9e565b602002602001018181525050610b1f565b6000826040015160030b610a8590611f13565b905060128112610ad957610a9a81600a611ef0565b610aac83670de0b6b3a7640000611efc565b610ab69190611f2f565b888681518110610ac857610ac8611b9e565b602002602001018181525050610b1d565b6000610ae6826012611f51565b9050610af381600a611ef0565b610afd9084611efc565b898781518110610b0f57610b0f611b9e565b602002602001018181525050505b505b8160600151868581518110610b3657610b36611b9e565b6020908102919091010152505050600101610905565b5080341115610b8d57336108fc610b638334611f51565b6040518115909202916000818181858888f19350505050158015610b8b573d6000803e3d6000fd5b505b50935093915050565b60015460405163d47eed4560e01b815260009182918291829182916001600160a01b03169063d47eed4590610bd1908a908a90600401611f8d565b602060405180830381865afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190612028565b905080341015610c345760405162461bcd60e51b81526004016103ce90612041565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e28908390610c68908b908b90600401611f8d565b6000604051808303818588803b158015610c8157600080fd5b505af1158015610c95573d6000803e3d6000fd5b50505050506000600289604051610cac9190611b82565b90815260405190819003602001902054905080610cdb5760405162461bcd60e51b81526004016103ce90611cfd565b6001546040516396834ad360e01b8152600481018390526000916001600160a01b0316906396834ad390602401608060405180830381865afa158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190611d34565b90506000816000015160070b13610d725760405162461bcd60e51b81526004016103ce90611dca565b600081600001516001600160401b031690506000826040015160030b12610dc9576040820151610da69060030b600a611ef0565b610db09082611efc565b610dc290670de0b6b3a7640000611efc565b9750610e3e565b6000826040015160030b610ddc90611f13565b905060128112610e1457610df181600a611ef0565b610e0383670de0b6b3a7640000611efc565b610e0d9190611f2f565b9850610e3c565b6000610e21826012611f51565b9050610e2e81600a611ef0565b610e389084611efc565b9950505b505b6064610e4b89605f611efc565b610e559190611f2f565b96506064610e64896069611efc565b610e6e9190611f2f565b95508160600151945083341115610eb757336108fc610e8d8634611f51565b6040518115909202916000818181858888f19350505050158015610eb5573d6000803e3d6000fd5b505b5050505093509350935093565b610ecc611570565b6000801b600282604051610ee09190611b82565b90815260200160405180910390205403610f2f5760405162461bcd60e51b815260206004820152601060248201526f14de5b589bdb081b9bdd08199bdd5b9960821b60448201526064016103ce565b6000801b600282604051610f439190611b82565b9081526040519081900360200190205560005b60035481101561102f57818051906020012060038281548110610f7b57610f7b611b9e565b90600052602060002001604051610f92919061206b565b6040518091039020036110275760038054610faf90600190611f51565b81548110610fbf57610fbf611b9e565b9060005260206000200160038281548110610fdc57610fdc611b9e565b906000526020600020019081610ff291906120e1565b506003805480611004576110046121bb565b60019003818190600052602060002001600061102091906115ed565b905561102f565b600101610f56565b508060405161103e9190611b82565b604051908190038120907f67f0eb67f5464265f0a87b8fcd08b9d7326c3f2c00e5bb6b3d465c82ec08080a90600090a250565b611079611570565b611083600061159d565b565b61108d611570565b60008251116110d75760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016103ce565b8061111d5760405162461bcd60e51b8152602060048201526016602482015275466565642049442063616e6e6f74206265207a65726f60501b60448201526064016103ce565b6000801b6002836040516111319190611b82565b9081526020016040518091039020540361118357600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b016111818382611c3e565b505b806002836040516111949190611b82565b908152604051908190036020018120919091556111b2908390611b82565b604051908190038120828252907f526259d6e9ade7fe0153ca3e878866dfab9366af7f492259a1345543b0c2b2689060200160405180910390a25050565b6003818154811061120057600080fd5b90600052602060002001600091509050805461121b90611bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461124790611bb4565b80156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b505050505081565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561136c5783829060005260206000200180546112df90611bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461130b90611bb4565b80156113585780601f1061132d57610100808354040283529160200191611358565b820191906000526020600020905b81548152906001019060200180831161133b57829003601f168201915b5050505050815260200190600101906112c0565b50505050905090565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed45906113a89086908690600401611f8d565b602060405180830381865afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e99190612028565b90505b92915050565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed45906114259086908690600401611f8d565b602060405180830381865afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612028565b9050803410156114885760405162461bcd60e51b81526004016103ce90612041565b600154604051631df3cbc560e31b81526001600160a01b039091169063ef9e5e289083906114bc9087908790600401611f8d565b6000604051808303818588803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b50505050508034111561058557336108fc6115048334611f51565b6040518115909202916000818181858888f1935050505015801561152c573d6000803e3d6000fd5b50505050565b61153a611570565b6001600160a01b03811661156457604051631e4fbdf760e01b8152600060048201526024016103ce565b61156d8161159d565b50565b6000546001600160a01b031633146110835760405163118cdaa760e01b81523360048201526024016103ce565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546115f990611bb4565b6000825580601f10611609575050565b601f01602090049060005260206000209081019061156d91905b808211156116375760008155600101611623565b5090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156116795761167961163b565b604052919050565b600082601f83011261169257600080fd5b81356001600160401b038111156116ab576116ab61163b565b6116be601f8201601f1916602001611651565b8181528460208386010111156116d357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561170257600080fd5b81356001600160401b0381111561171857600080fd5b61172484828501611681565b949350505050565b60006001600160401b038211156117455761174561163b565b5060051b60200190565b600082601f83011261176057600080fd5b813560206117756117708361172c565b611651565b82815260059290921b8401810191818101908684111561179457600080fd5b8286015b848110156117d35780356001600160401b038111156117b75760008081fd5b6117c58986838b0101611681565b845250918301918301611798565b509695505050505050565b600080604083850312156117f157600080fd5b82356001600160401b038082111561180857600080fd5b6118148683870161174f565b935060209150818501358181111561182b57600080fd5b85019050601f8101861361183e57600080fd5b803561184c6117708261172c565b81815260059190911b8201830190838101908883111561186b57600080fd5b928401925b8284101561188957833582529284019290840190611870565b80955050505050509250929050565b60008083601f8401126118aa57600080fd5b5081356001600160401b038111156118c157600080fd5b6020830191508360208260051b85010111156118dc57600080fd5b9250929050565b6000806000604084860312156118f857600080fd5b83356001600160401b038082111561190f57600080fd5b61191b8783880161174f565b9450602086013591508082111561193157600080fd5b5061193e86828701611898565b9497909650939450505050565b60008151808452602080850194506020840160005b8381101561197c57815187529582019590820190600101611960565b509495945050505050565b60408152600061199a604083018561194b565b82810360208401526119ac818561194b565b95945050505050565b6000806000604084860312156119ca57600080fd5b83356001600160401b03808211156119e157600080fd5b61191b87838801611681565b60008060408385031215611a0057600080fd5b82356001600160401b03811115611a1657600080fd5b611a2285828601611681565b95602094909401359450505050565b600060208284031215611a4357600080fd5b5035919050565b60005b83811015611a65578181015183820152602001611a4d565b50506000910152565b60008151808452611a86816020860160208601611a4a565b601f01601f19169290920160200192915050565b6020815260006113e96020830184611a6e565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611b0457603f19888603018452611af2858351611a6e565b94509285019290850190600101611ad6565b5092979650505050505050565b60008060208385031215611b2457600080fd5b82356001600160401b03811115611b3a57600080fd5b611b4685828601611898565b90969095509350505050565b600060208284031215611b6457600080fd5b81356001600160a01b0381168114611b7b57600080fd5b9392505050565b60008251611b94818460208701611a4a565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611bc857607f821691505b602082108103611be857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610585576000816000526020600020601f850160051c81016020861015611c175750805b601f850160051c820191505b81811015611c3657828155600101611c23565b505050505050565b81516001600160401b03811115611c5757611c5761163b565b611c6b81611c658454611bb4565b84611bee565b602080601f831160018114611ca05760008415611c885750858301515b600019600386901b1c1916600185901b178555611c36565b600085815260208120601f198616915b82811015611ccf57888601518255948401946001909101908401611cb0565b5085821015611ced5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601f908201527f50726963652066656564206e6f7420666f756e6420666f722073796d626f6c00604082015260600190565b600060808284031215611d4657600080fd5b604051608081016001600160401b038282108183111715611d6957611d6961163b565b81604052845191508160070b8214611d8057600080fd5b9082526020840151908082168214611d9757600080fd5b5060208201526040830151600381900b8114611db257600080fd5b60408201526060928301519281019290925250919050565b602080825260129082015271496e76616c6964207072696365206461746160701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611e47578160001904821115611e2d57611e2d611df6565b80851615611e3a57918102915b93841c9390800290611e11565b509250929050565b600082611e5e575060016113ec565b81611e6b575060006113ec565b8160018114611e815760028114611e8b57611ea7565b60019150506113ec565b60ff841115611e9c57611e9c611df6565b50506001821b6113ec565b5060208310610133831016604e8410600b8410161715611eca575081810a6113ec565b611ed48383611e0c565b8060001904821115611ee857611ee8611df6565b029392505050565b60006113e98383611e4f565b80820281158282048414176113ec576113ec611df6565b6000600160ff1b8201611f2857611f28611df6565b5060000390565b600082611f4c57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113ec576113ec611df6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b8781101561201b57868403603f190183528135368a9003601e19018112611fd257600080fd5b890185810190356001600160401b03811115611fed57600080fd5b803603821315611ffc57600080fd5b612007868284611f64565b955050509184019190840190600101611fac565b5091979650505050505050565b60006020828403121561203a57600080fd5b5051919050565b60208082526010908201526f496e73756666696369656e742066656560801b604082015260600190565b600080835461207981611bb4565b6001828116801561209157600181146120a6576120d5565b60ff19841687528215158302870194506120d5565b8760005260208060002060005b858110156120cc5781548a8201529084019082016120b3565b50505082870194505b50929695505050505050565b8181036120ec575050565b6120f68254611bb4565b6001600160401b0381111561210d5761210d61163b565b61211b81611c658454611bb4565b6000601f82116001811461214f57600083156121375750848201545b600019600385901b1c1916600184901b1784556121b4565b600085815260209020601f19841690600086815260209020845b838110156121895782860154825560019586019590910190602001612169565b50858310156121a75781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e2de359228dc6ac2b5dbfd59d043d55d50cb2b31311f7016ed03707e1a28877664736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getPrice(string)": {
        "details": "只查询已缓存的价格，不会更新。推荐使用 updateAndGetPrices 获取最新价格警告：此函数返回的可能不是最新价格，仅用于查询已缓存的价格数据"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAndGetPrice(string,bytes[])": {
        "params": {
          "symbol": "股票符号",
          "updateData": "价格更新数据"
        },
        "returns": {
          "maxPrice": "最大价格（+5%）",
          "minPrice": "最小价格（-5%）",
          "price": "转换为18位小数的价格",
          "publishTime": "发布时间"
        }
      },
      "updateAndGetPrices(string[],bytes[])": {
        "params": {
          "symbols": "要查询的股票符号数组",
          "updateData": "价格更新数据"
        }
      },
      "updatePriceFeeds(bytes[])": {
        "params": {
          "updateData": "从 Pyth 网络获取的价格更新数据"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchSetFeedIds(string[],bytes32[])": {
        "notice": "批量设置 Feed ID"
      },
      "getPrice(string)": {
        "notice": "根据股票符号查询价格（仅查询版本）"
      },
      "getSupportedSymbols()": {
        "notice": "获取所有支持的股票符号"
      },
      "getUpdateFee(bytes[])": {
        "notice": "获取更新价格所需的费用"
      },
      "isSymbolSupported(string)": {
        "notice": "检查是否支持某个股票符号"
      },
      "updateAndGetPrice(string,bytes[])": {
        "notice": "更新并获取单个股票的最新价格"
      },
      "updateAndGetPrices(string[],bytes[])": {
        "notice": "批量更新并查询价格（推荐使用）"
      },
      "updatePriceFeeds(bytes[])": {
        "notice": "更新价格数据（在查询价格前调用）"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1605,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3952,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "pyth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)3508"
      },
      {
        "astId": 3956,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "symbolToFeedId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      {
        "astId": 3959,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "supportedSymbols",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPyth)3508": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}