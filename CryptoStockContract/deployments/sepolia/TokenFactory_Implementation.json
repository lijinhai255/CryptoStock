{
  "address": "0x7FF9CF76D64fD560cAC05CA433Ca90e34259e6B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ImplementationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stockTokenImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtTokenAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracleAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "setStockTokenImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUSDTTokenAddress",
          "type": "address"
        }
      ],
      "name": "setUSDTTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stockTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokenBySymbol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fd9dc13f2359d95d131f137444421cec62ce87ad364a29bb505bd94c880e728",
  "receipt": {
    "to": null,
    "from": "0x46b43ad9F6C20c400aC17a282022E578417F796A",
    "contractAddress": "0x7FF9CF76D64fD560cAC05CA433Ca90e34259e6B5",
    "transactionIndex": 33,
    "gasUsed": "1480141",
    "logsBloom": "0x
    "blockHash": "0xbd9adbf5ff8985c5307748e59f262cb48ad1a914a88c419e3a3d7c0911e78f09",
    "transactionHash": "0x2fd9dc13f2359d95d131f137444421cec62ce87ad364a29bb505bd94c880e728",
    "logs": [],
    "blockNumber": 9254877,
    "cumulativeGasUsed": "19095230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d27bd645ed95b2a25e0c5504903a8c5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stockTokenImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracleAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setStockTokenImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUSDTTokenAddress\",\"type\":\"address\"}],\"name\":\"setUSDTTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stockTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfcd09c2aa8cc3f93e12545454359f901965db312bc03833daf84de0c03e05022\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function __Pausable_init() internal onlyInitializing {\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa6bf6b7efe0e6625a9dcd30c5ddf52c4c24fe8372f37c7de9dbf5034746768d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\\n\\npragma solidity >=0.4.11;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"./ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address implementation, bytes memory _data) payable {\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa3066ff86b94128a9d3956a63a0511fa1aae41bd455772ab587b32ff322acb2e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Returns the required fee to update a TWAP price.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getTwapUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime,` but choose to store price updates if `storeUpdatesIfFresh`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// This method will eventually allow the caller to determine whether parsed price feeds should update\\n    /// the stored values as well.\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minAllowedPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxAllowedPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @param storeUpdatesIfFresh flag for the parse function to\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesWithConfig(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minAllowedPublishTime,\\n        uint64 maxAllowedPublishTime,\\n        bool checkUniqueness,\\n        bool checkUpdateDataIsMinimal,\\n        bool storeUpdatesIfFresh\\n    )\\n        external\\n        payable\\n        returns (\\n            PythStructs.PriceFeed[] memory priceFeeds,\\n            uint64[] memory slots\\n        );\\n\\n    /// @notice Parse time-weighted average price (TWAP) from two consecutive price updates for the given `priceIds`.\\n    ///\\n    /// This method calculates TWAP between two data points by processing the difference in cumulative price values\\n    /// divided by the time period. It requires exactly two updates that contain valid price information\\n    /// for all the requested price IDs.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the updateData array.\\n    ///\\n    /// @dev Reverts if:\\n    /// - The transferred fee is not sufficient\\n    /// - The updateData is invalid or malformed\\n    /// - The updateData array does not contain exactly 2 updates\\n    /// - There is no update for any of the given `priceIds`\\n    /// - The time ordering between data points is invalid (start time must be before end time)\\n    /// @param updateData Array containing exactly two price updates (start and end points for TWAP calculation)\\n    /// @param priceIds Array of price ids to calculate TWAP for\\n    /// @return twapPriceFeeds Array of TWAP price feeds corresponding to the given `priceIds` (with the same order)\\n    function parseTwapPriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds\\n    )\\n        external\\n        payable\\n        returns (PythStructs.TwapPriceFeed[] memory twapPriceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xada6a1f4898b056d2804409ecad466b786dc6a12bc6f8f247e7f1471c1b86fcd\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when the TWAP price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param startTime Start time of the TWAP.\\n    /// @param endTime End time of the TWAP.\\n    /// @param twapPrice Price of the TWAP.\\n    /// @param twapConf Confidence interval of the TWAP.\\n    /// @param downSlotsRatio Down slot ratio of the TWAP.\\n    event TwapPriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 startTime,\\n        uint64 endTime,\\n        int64 twapPrice,\\n        uint64 twapConf,\\n        uint32 downSlotsRatio\\n    );\\n}\\n\",\"keccak256\":\"0xd67239becd2c39bd9d065830be24e70606f5747ab31b8818bea849d09ac17ddc\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n\\n    struct TwapPriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Start time of the TWAP\\n        uint64 startTime;\\n        // End time of the TWAP\\n        uint64 endTime;\\n        // TWAP price\\n        Price twap;\\n        // Down slot ratio represents the ratio of price feed updates that were missed or unavailable\\n        // during the TWAP period, expressed as a fixed-point number between 0 and 1e6 (100%).\\n        // For example:\\n        //   - 0 means all price updates were available\\n        //   - 500_000 means 50% of updates were missed\\n        //   - 1_000_000 means all updates were missed\\n        // This can be used to assess the quality/reliability of the TWAP calculation.\\n        // Applications should define a maximum acceptable ratio (e.g. 100000 for 10%)\\n        // and revert if downSlotsRatio exceeds it.\\n        uint32 downSlotsRatio;\\n    }\\n\\n    // Information used to calculate time-weighted average prices (TWAP)\\n    struct TwapPriceInfo {\\n        // slot 1\\n        int128 cumulativePrice;\\n        uint128 cumulativeConf;\\n        // slot 2\\n        uint64 numDownSlots;\\n        uint64 publishSlot;\\n        uint64 publishTime;\\n        uint64 prevPublishTime;\\n        // slot 3\\n        int32 expo;\\n    }\\n}\\n\",\"keccak256\":\"0x474436bf0d558cc9b2c00a9d0ce318147acdf7963f34ef4acadb9248e65bbc7b\",\"license\":\"Apache-2.0\"},\"contracts/OracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OracleAggregator is Ownable {\\n    IPyth public pyth;\\n    \\n    // \\u80a1\\u7968\\u7b26\\u53f7 => Pyth Feed ID \\u6620\\u5c04\\n    mapping(string => bytes32) public symbolToFeedId;\\n    \\n    // \\u5df2\\u652f\\u6301\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\u5217\\u8868\\n    string[] public supportedSymbols;\\n    \\n    // \\u4e8b\\u4ef6\\n    event FeedIdUpdated(string indexed symbol, bytes32 feedId);\\n    event FeedIdRemoved(string indexed symbol);\\n\\n    constructor(address pythContract) Ownable(msg.sender) {\\n        pyth = IPyth(pythContract);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u80a1\\u7968\\u7b26\\u53f7\\u5bf9\\u5e94\\u7684 Feed ID\\n    function setFeedId(string memory symbol, bytes32 feedId) external onlyOwner {\\n        require(bytes(symbol).length > 0, \\\"Symbol cannot be empty\\\");\\n        require(feedId != bytes32(0), \\\"Feed ID cannot be zero\\\");\\n        \\n        // \\u5982\\u679c\\u662f\\u65b0\\u7b26\\u53f7\\uff0c\\u6dfb\\u52a0\\u5230\\u652f\\u6301\\u5217\\u8868\\n        if (symbolToFeedId[symbol] == bytes32(0)) {\\n            supportedSymbols.push(symbol);\\n        }\\n        \\n        symbolToFeedId[symbol] = feedId;\\n        emit FeedIdUpdated(symbol, feedId);\\n    }\\n    \\n    // \\u79fb\\u9664\\u80a1\\u7968\\u7b26\\u53f7\\n    function removeFeedId(string memory symbol) external onlyOwner {\\n        require(symbolToFeedId[symbol] != bytes32(0), \\\"Symbol not found\\\");\\n        \\n        symbolToFeedId[symbol] = bytes32(0);\\n        \\n        // \\u4ece\\u652f\\u6301\\u5217\\u8868\\u4e2d\\u79fb\\u9664\\n        for (uint i = 0; i < supportedSymbols.length; i++) {\\n            if (keccak256(bytes(supportedSymbols[i])) == keccak256(bytes(symbol))) {\\n                supportedSymbols[i] = supportedSymbols[supportedSymbols.length - 1];\\n                supportedSymbols.pop();\\n                break;\\n            }\\n        }\\n        \\n        emit FeedIdRemoved(symbol);\\n    }\\n\\n    /// @notice \\u6839\\u636e\\u80a1\\u7968\\u7b26\\u53f7\\u67e5\\u8be2\\u4ef7\\u683c\\uff08\\u4ec5\\u67e5\\u8be2\\u7248\\u672c\\uff09\\n    /// @dev \\u53ea\\u67e5\\u8be2\\u5df2\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\uff0c\\u4e0d\\u4f1a\\u66f4\\u65b0\\u3002\\u63a8\\u8350\\u4f7f\\u7528 updateAndGetPrices \\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\n    /// @dev \\u8b66\\u544a\\uff1a\\u6b64\\u51fd\\u6570\\u8fd4\\u56de\\u7684\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u4ef7\\u683c\\uff0c\\u4ec5\\u7528\\u4e8e\\u67e5\\u8be2\\u5df2\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\u6570\\u636e\\n    function getPrice(string memory symbol) external view returns (\\n        uint256 price, \\n        uint256 minPrice, \\n        uint256 maxPrice, \\n        uint256 publishTime\\n    ) {\\n        bytes32 feedId = symbolToFeedId[symbol];\\n        require(feedId != bytes32(0), \\\"Price feed not found for symbol\\\");\\n        \\n        // \\u83b7\\u53d6\\u7f13\\u5b58\\u7684\\u4ef7\\u683c\\u6570\\u636e\\uff08\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u7684\\uff09\\n        // \\u8981\\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\uff0c\\u8bf7\\u4f7f\\u7528 updateAndGetPrices \\u51fd\\u6570\\n        PythStructs.Price memory p = pyth.getPriceUnsafe(feedId);\\n        require(p.price > 0, \\\"Invalid price data\\\");\\n        \\n        // \\u52a8\\u6001\\u8f6c\\u6362\\u4e3a 18 \\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6\\n        // Pyth\\u4ef7\\u683c\\u683c\\u5f0f\\uff1aprice * 10^expo = \\u5b9e\\u9645\\u4ef7\\u683c\\n        // \\u6211\\u4eec\\u9700\\u8981\\u8f6c\\u6362\\u4e3a\\uff1a\\u5b9e\\u9645\\u4ef7\\u683c * 10^18\\n        \\n        uint256 absPrice = uint256(uint64(p.price)); // \\u786e\\u4fdd\\u4e3a\\u6b63\\u6570\\n        \\n        if (p.expo >= 0) {\\n            // expo >= 0: price\\u5df2\\u7ecf\\u662f\\u6574\\u6570\\uff0c\\u9700\\u8981\\u4e58\\u4ee510^expo\\uff0c\\u7136\\u540e\\u518d\\u4e58\\u4ee510^18\\n            price = absPrice * (10 ** uint256(int256(p.expo))) * 1e18;\\n        } else {\\n            // expo < 0: price\\u9700\\u8981\\u9664\\u4ee510^(-expo)\\u6765\\u5f97\\u5230\\u5b9e\\u9645\\u4ef7\\u683c\\uff0c\\u7136\\u540e\\u4e58\\u4ee510^18\\n            // \\u4e3a\\u4e86\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\uff0c\\u6211\\u4eec\\u91cd\\u65b0\\u6392\\u5217\\u8ba1\\u7b97\\u987a\\u5e8f\\n            int256 negExpo = -int256(p.expo);\\n            if (negExpo >= 18) {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5927\\u4e8e\\u7b49\\u4e8e18\\uff0c\\u7ed3\\u679c\\u4f1a\\u5f88\\u5c0f\\n                price = absPrice * 1e18 / (10 ** uint256(negExpo));\\n            } else {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5c0f\\u4e8e18\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f18\\u5316\\u8ba1\\u7b97\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\n                uint256 adjustment = 18 - uint256(negExpo);\\n                price = absPrice * (10 ** adjustment);\\n            }\\n        }\\n        \\n        // \\u7b80\\u5355\\u8bbe\\u7f6e\\u6700\\u5c0f\\u6700\\u5927\\u4ef7\\u683c\\uff08\\u53ef\\u4ee5\\u6839\\u636e\\u9700\\u8981\\u8c03\\u6574\\uff09\\n        minPrice = price * 95 / 100; // -5%\\n        maxPrice = price * 105 / 100; // +5%\\n        publishTime = p.publishTime;\\n    }\\n    \\n    /// @notice \\u66f4\\u65b0\\u5e76\\u83b7\\u53d6\\u5355\\u4e2a\\u80a1\\u7968\\u7684\\u6700\\u65b0\\u4ef7\\u683c\\n    /// @param symbol \\u80a1\\u7968\\u7b26\\u53f7\\n    /// @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n    /// @return price \\u8f6c\\u6362\\u4e3a18\\u4f4d\\u5c0f\\u6570\\u7684\\u4ef7\\u683c\\n    /// @return minPrice \\u6700\\u5c0f\\u4ef7\\u683c\\uff08-5%\\uff09\\n    /// @return maxPrice \\u6700\\u5927\\u4ef7\\u683c\\uff08+5%\\uff09\\n    /// @return publishTime \\u53d1\\u5e03\\u65f6\\u95f4\\n    function updateAndGetPrice(\\n        string memory symbol,\\n        bytes[] calldata updateData\\n    ) external payable returns (\\n        uint256 price,\\n        uint256 minPrice,\\n        uint256 maxPrice,\\n        uint256 publishTime\\n    ) {\\n        // 1. \\u66f4\\u65b0\\u94fe\\u4e0a\\u4ef7\\u683c\\n        uint fee = pyth.getUpdateFee(updateData);\\n        require(msg.value >= fee, \\\"Insufficient fee\\\");\\n        pyth.updatePriceFeeds{value: fee}(updateData);\\n        \\n        // 2. \\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\n        bytes32 feedId = symbolToFeedId[symbol];\\n        require(feedId != bytes32(0), \\\"Price feed not found for symbol\\\");\\n        \\n        PythStructs.Price memory p = pyth.getPriceUnsafe(feedId);\\n        require(p.price > 0, \\\"Invalid price data\\\");\\n        \\n        // \\u52a8\\u6001\\u8f6c\\u6362\\u4e3a 18 \\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6\\n        uint256 absPrice = uint256(uint64(p.price)); // \\u786e\\u4fdd\\u4e3a\\u6b63\\u6570\\n        \\n        if (p.expo >= 0) {\\n            // expo >= 0: price\\u5df2\\u7ecf\\u662f\\u6574\\u6570\\uff0c\\u9700\\u8981\\u4e58\\u4ee510^expo\\uff0c\\u7136\\u540e\\u518d\\u4e58\\u4ee510^18\\n            price = absPrice * (10 ** uint256(int256(p.expo))) * 1e18;\\n        } else {\\n            // expo < 0: price\\u9700\\u8981\\u9664\\u4ee510^(-expo)\\u6765\\u5f97\\u5230\\u5b9e\\u9645\\u4ef7\\u683c\\uff0c\\u7136\\u540e\\u4e58\\u4ee510^18\\n            // \\u4e3a\\u4e86\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\uff0c\\u6211\\u4eec\\u91cd\\u65b0\\u6392\\u5217\\u8ba1\\u7b97\\u987a\\u5e8f\\n            int256 negExpo = -int256(p.expo);\\n            if (negExpo >= 18) {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5927\\u4e8e\\u7b49\\u4e8e18\\uff0c\\u7ed3\\u679c\\u4f1a\\u5f88\\u5c0f\\n                price = absPrice * 1e18 / (10 ** uint256(negExpo));\\n            } else {\\n                // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5c0f\\u4e8e18\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f18\\u5316\\u8ba1\\u7b97\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\n                uint256 adjustment = 18 - uint256(negExpo);\\n                price = absPrice * (10 ** adjustment);\\n            }\\n        }\\n        \\n        // \\u7b80\\u5355\\u8bbe\\u7f6e\\u6700\\u5c0f\\u6700\\u5927\\u4ef7\\u683c\\uff08\\u53ef\\u4ee5\\u6839\\u636e\\u9700\\u8981\\u8c03\\u6574\\uff09\\n        minPrice = price * 95 / 100; // -5%\\n        maxPrice = price * 105 / 100; // +5%\\n        publishTime = p.publishTime;\\n        \\n        // \\u8fd4\\u8fd8\\u591a\\u4f59\\u7684\\u8d39\\u7528\\n        if (msg.value > fee) {\\n            payable(msg.sender).transfer(msg.value - fee);\\n        }\\n    }\\n    \\n    /// @notice \\u66f4\\u65b0\\u4ef7\\u683c\\u6570\\u636e\\uff08\\u5728\\u67e5\\u8be2\\u4ef7\\u683c\\u524d\\u8c03\\u7528\\uff09\\n    /// @param updateData \\u4ece Pyth \\u7f51\\u7edc\\u83b7\\u53d6\\u7684\\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable {\\n        // \\u8ba1\\u7b97\\u66f4\\u65b0\\u8d39\\u7528\\n        uint fee = pyth.getUpdateFee(updateData);\\n        require(msg.value >= fee, \\\"Insufficient fee\\\");\\n        \\n        // \\u66f4\\u65b0\\u94fe\\u4e0a\\u4ef7\\u683c\\n        pyth.updatePriceFeeds{value: fee}(updateData);\\n        \\n        // \\u8fd4\\u8fd8\\u591a\\u4f59\\u7684\\u8d39\\u7528\\n        if (msg.value > fee) {\\n            payable(msg.sender).transfer(msg.value - fee);\\n        }\\n    }\\n    \\n    /// @notice \\u83b7\\u53d6\\u66f4\\u65b0\\u4ef7\\u683c\\u6240\\u9700\\u7684\\u8d39\\u7528\\n    function getUpdateFee(bytes[] calldata updateData) external view returns (uint256) {\\n        return pyth.getUpdateFee(updateData);\\n    }\\n    \\n    /// @notice \\u6279\\u91cf\\u66f4\\u65b0\\u5e76\\u67e5\\u8be2\\u4ef7\\u683c\\uff08\\u63a8\\u8350\\u4f7f\\u7528\\uff09\\n    /// @param symbols \\u8981\\u67e5\\u8be2\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\u6570\\u7ec4\\n    /// @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n    function updateAndGetPrices(\\n        string[] memory symbols, \\n        bytes[] calldata updateData\\n    ) external payable returns (\\n        uint256[] memory prices,\\n        uint256[] memory publishTimes\\n    ) {\\n        // 1. \\u66f4\\u65b0\\u94fe\\u4e0a\\u4ef7\\u683c\\n        uint fee = pyth.getUpdateFee(updateData);\\n        require(msg.value >= fee, \\\"Insufficient fee\\\");\\n        pyth.updatePriceFeeds{value: fee}(updateData);\\n        \\n        // 2. \\u67e5\\u8be2\\u4ef7\\u683c\\n        prices = new uint256[](symbols.length);\\n        publishTimes = new uint256[](symbols.length);\\n        \\n        for (uint i = 0; i < symbols.length; i++) {\\n            bytes32 feedId = symbolToFeedId[symbols[i]];\\n            require(feedId != bytes32(0), \\\"Price feed not found for symbol\\\");\\n            \\n            PythStructs.Price memory p = pyth.getPriceUnsafe(feedId);\\n            require(p.price > 0, \\\"Invalid price data\\\");\\n            \\n            // \\u52a8\\u6001\\u8f6c\\u6362\\u4e3a 18 \\u4f4d\\u5c0f\\u6570\\u7cbe\\u5ea6\\uff08\\u4e0egetPrice\\u51fd\\u6570\\u4fdd\\u6301\\u4e00\\u81f4\\uff09\\n            uint256 absPrice = uint256(uint64(p.price)); // \\u786e\\u4fdd\\u4e3a\\u6b63\\u6570\\n            \\n            if (p.expo >= 0) {\\n                // expo >= 0: price\\u5df2\\u7ecf\\u662f\\u6574\\u6570\\uff0c\\u9700\\u8981\\u4e58\\u4ee510^expo\\uff0c\\u7136\\u540e\\u518d\\u4e58\\u4ee510^18\\n                prices[i] = absPrice * (10 ** uint256(int256(p.expo))) * 1e18;\\n            } else {\\n                // expo < 0: price\\u9700\\u8981\\u9664\\u4ee510^(-expo)\\u6765\\u5f97\\u5230\\u5b9e\\u9645\\u4ef7\\u683c\\uff0c\\u7136\\u540e\\u4e58\\u4ee510^18\\n                // \\u4e3a\\u4e86\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\uff0c\\u6211\\u4eec\\u91cd\\u65b0\\u6392\\u5217\\u8ba1\\u7b97\\u987a\\u5e8f\\n                int256 negExpo = -int256(p.expo);\\n                if (negExpo >= 18) {\\n                    // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5927\\u4e8e\\u7b49\\u4e8e18\\uff0c\\u7ed3\\u679c\\u4f1a\\u5f88\\u5c0f\\n                    prices[i] = absPrice * 1e18 / (10 ** uint256(negExpo));\\n                } else {\\n                    // \\u5982\\u679c\\u8d1f\\u6307\\u6570\\u5c0f\\u4e8e18\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f18\\u5316\\u8ba1\\u7b97\\u907f\\u514d\\u7cbe\\u5ea6\\u4e22\\u5931\\n                    uint256 adjustment = 18 - uint256(negExpo);\\n                    prices[i] = absPrice * (10 ** adjustment);\\n                }\\n            }\\n            \\n            publishTimes[i] = p.publishTime;\\n        }\\n        \\n        // \\u8fd4\\u8fd8\\u591a\\u4f59\\u7684\\u8d39\\u7528\\n        if (msg.value > fee) {\\n            payable(msg.sender).transfer(msg.value - fee);\\n        }\\n    }\\n    \\n    /// @notice \\u83b7\\u53d6\\u6240\\u6709\\u652f\\u6301\\u7684\\u80a1\\u7968\\u7b26\\u53f7\\n    function getSupportedSymbols() external view returns (string[] memory) {\\n        return supportedSymbols;\\n    }\\n    \\n    /// @notice \\u68c0\\u67e5\\u662f\\u5426\\u652f\\u6301\\u67d0\\u4e2a\\u80a1\\u7968\\u7b26\\u53f7\\n    function isSymbolSupported(string memory symbol) external view returns (bool) {\\n        return symbolToFeedId[symbol] != bytes32(0);\\n    }\\n    \\n    /// @notice \\u6279\\u91cf\\u8bbe\\u7f6e Feed ID\\n    function batchSetFeedIds(string[] memory symbols, bytes32[] memory feedIds) external onlyOwner {\\n        require(symbols.length == feedIds.length, \\\"Arrays length mismatch\\\");\\n        \\n        for (uint i = 0; i < symbols.length; i++) {\\n            require(bytes(symbols[i]).length > 0, \\\"Symbol cannot be empty\\\");\\n            require(feedIds[i] != bytes32(0), \\\"Feed ID cannot be zero\\\");\\n            \\n            // \\u5982\\u679c\\u662f\\u65b0\\u7b26\\u53f7\\uff0c\\u6dfb\\u52a0\\u5230\\u652f\\u6301\\u5217\\u8868\\n            if (symbolToFeedId[symbols[i]] == bytes32(0)) {\\n                supportedSymbols.push(symbols[i]);\\n            }\\n            \\n            symbolToFeedId[symbols[i]] = feedIds[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae18707c1b00307f027b251ce8f6bae9ee2216c002a3e66a0f75496792f447dd\",\"license\":\"MIT\"},\"contracts/StockToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./OracleAggregator.sol\\\";\\n\\n/**\\n * @title StockToken - \\u6539\\u8fdb\\u7248\\u80a1\\u7968\\u4ee3\\u5e01\\u5408\\u7ea6\\n * @dev \\u53ef\\u5347\\u7ea7\\u7684ERC20\\u4ee3\\u5e01\\uff0c\\u4ee3\\u8868\\u80a1\\u7968\\u4efd\\u989d\\uff0c\\u652f\\u6301\\u4e70\\u5356\\u529f\\u80fd\\n * \\n * \\u4e3b\\u8981\\u6539\\u8fdb\\uff1a\\n * 1. \\u4ee3\\u5e01\\u521d\\u59cb\\u5316\\u65f6\\u5206\\u914d\\u7ed9owner\\uff0c\\u800c\\u975e\\u5408\\u7ea6\\n * 2. \\u4fee\\u590d\\u4ef7\\u683c\\u8ba1\\u7b97\\u903b\\u8f91\\n * 3. \\u6dfb\\u52a0\\u5b89\\u5168\\u673a\\u5236\\uff08\\u6682\\u505c\\u3001\\u91cd\\u5165\\u4fdd\\u62a4\\uff09\\n * 4. \\u589e\\u52a0\\u7ba1\\u7406\\u529f\\u80fd\\uff08\\u63d0\\u53d6\\u3001\\u8c03\\u6574\\u53c2\\u6570\\uff09\\n * 5. \\u6dfb\\u52a0\\u6ed1\\u70b9\\u4fdd\\u62a4\\u548c\\u6700\\u5c0f\\u4ea4\\u6613\\u9650\\u5236\\n */\\ncontract StockToken is\\n    Initializable,\\n    ERC20Upgradeable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    OracleAggregator public oracleAggregator;\\n    IERC20 public usdtToken;\\n    string public stockSymbol;\\n    \\n    // \\u4ea4\\u6613\\u53c2\\u6570\\n    uint256 public minTradeAmount ; // \\u6700\\u5c0f\\u4ea4\\u6613\\u91d1\\u989d 1 USDT (6 decimals)\\n    uint256 public maxSlippage ; // \\u6700\\u5927\\u6ed1\\u70b9 3% (\\u57fa\\u70b9\\u8868\\u793a)\\n    uint256 public tradeFeeRate ; // \\u4ea4\\u6613\\u624b\\u7eed\\u8d39 0.3% (\\u57fa\\u70b9\\u8868\\u793a)\\n    address public feeReceiver; // \\u624b\\u7eed\\u8d39\\u63a5\\u6536\\u5730\\u5740\\n    \\n    // \\u4e8b\\u4ef6\\n    event TokenPurchased(address indexed buyer, uint256 usdtAmount, uint256 tokenAmount, uint256 price);\\n    event TokenSold(address indexed seller, uint256 tokenAmount, uint256 usdtAmount, uint256 price);\\n    event ParameterUpdated(string indexed parameter, uint256 oldValue, uint256 newValue);\\n    event EmergencyWithdraw(address indexed token, address indexed to, uint256 amount);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 initialSupply_,\\n        address owner_,\\n        address oracleAggregator_,\\n        address usdtToken_\\n    ) public initializer {\\n        __ERC20_init(name_, symbol_);\\n        __Ownable_init(owner_);\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        \\n        stockSymbol = symbol_;\\n        oracleAggregator = OracleAggregator(oracleAggregator_);\\n        usdtToken = IERC20(usdtToken_);\\n        feeReceiver = owner_; // \\u9ed8\\u8ba4\\u624b\\u7eed\\u8d39\\u63a5\\u6536\\u8005\\u4e3aowner\\n        \\n        // \\u8bbe\\u7f6e\\u9ed8\\u8ba4\\u4ea4\\u6613\\u53c2\\u6570\\n        minTradeAmount = 1e6; // \\u6700\\u5c0f\\u4ea4\\u6613\\u91d1\\u989d 1 USDT (6 decimals)\\n        maxSlippage = 300; // \\u6700\\u5927\\u6ed1\\u70b9 3% (\\u57fa\\u70b9\\u8868\\u793a)\\n        tradeFeeRate = 30; // \\u4ea4\\u6613\\u624b\\u7eed\\u8d39 0.3% (\\u57fa\\u70b9\\u8868\\u793a)\\n        \\n        // \\ud83d\\udd25 \\u5173\\u952e\\u6539\\u8fdb\\uff1a\\u4ee3\\u5e01\\u5206\\u914d\\u7ed9owner\\u800c\\u4e0d\\u662f\\u5408\\u7ea6\\n        _mint(owner_, initialSupply_);\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    /**\\n     * @dev \\u94f8\\u9020\\u65b0\\u4ee3\\u5e01 - \\u5206\\u914d\\u7ed9owner\\n     */\\n    function mint(uint256 amount) external onlyOwner {\\n        _mint(owner(), amount);\\n    }\\n\\n    /**\\n     * @dev \\u5411\\u5408\\u7ea6\\u6ce8\\u5165\\u4ee3\\u5e01\\u7528\\u4e8e\\u4ea4\\u6613\\n     */\\n    function injectTokens(uint256 amount) external onlyOwner {\\n        require(balanceOf(owner()) >= amount, \\\"Insufficient owner balance\\\");\\n        _transfer(owner(), address(this), amount);\\n    }\\n\\n    /**\\n     * @dev \\u8d2d\\u4e70\\u80a1\\u7968\\u4ee3\\u5e01\\n     * @param usdtAmount \\u6295\\u5165\\u7684USDT\\u6570\\u91cf\\n     * @param minTokenAmount \\u6700\\u5c11\\u83b7\\u5f97\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff08\\u6ed1\\u70b9\\u4fdd\\u62a4\\uff09\\n     * @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n     */\\n    function buy(uint256 usdtAmount, uint256 minTokenAmount, bytes[] calldata updateData) \\n        external \\n        payable\\n        nonReentrant \\n        whenNotPaused \\n    {\\n        require(usdtAmount >= minTradeAmount, \\\"Amount below minimum\\\");\\n\\n        // \\u66f4\\u65b0\\u5e76\\u83b7\\u53d6\\u6700\\u65b0\\u80a1\\u7968\\u4ef7\\u683c\\n        (uint256 stockPrice, , , ) = oracleAggregator.updateAndGetPrice{value: msg.value}(stockSymbol, updateData);\\n        require(stockPrice > 0, \\\"Invalid stock price\\\");\\n\\n        // \\ud83d\\udd25 \\u4fee\\u590d\\u4ef7\\u683c\\u8ba1\\u7b97\\u903b\\u8f91\\n        // USDT: 6 decimals, stockPrice: 18 decimals, \\u76ee\\u6807: 18 decimals\\n        // tokenAmount = (usdtAmount * 1e12) * 1e18 / stockPrice\\n        uint256 tokenAmountBeforeFee = (usdtAmount * 1e30) / stockPrice;\\n        \\n        // \\u8ba1\\u7b97\\u624b\\u7eed\\u8d39\\n        uint256 feeAmount = (tokenAmountBeforeFee * tradeFeeRate) / 10000;\\n        uint256 tokenAmount = tokenAmountBeforeFee - feeAmount;\\n        \\n        // \\u6ed1\\u70b9\\u4fdd\\u62a4\\n        require(tokenAmount >= minTokenAmount, \\\"Slippage too high\\\");\\n\\n        // \\u68c0\\u67e5\\u5408\\u7ea6\\u4ee3\\u5e01\\u4f59\\u989d\\n        require(\\n            balanceOf(address(this)) >= tokenAmount,\\n            \\\"Insufficient token supply\\\"\\n        );\\n\\n        // \\u8f6c\\u79fbUSDT\\u5230\\u5408\\u7ea6\\n        require(\\n            usdtToken.transferFrom(msg.sender, address(this), usdtAmount),\\n            \\\"USDT transfer failed\\\"\\n        );\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\u7ed9\\u7528\\u6237\\n        _transfer(address(this), msg.sender, tokenAmount);\\n        \\n        // \\u8f6c\\u79fb\\u624b\\u7eed\\u8d39\\u4ee3\\u5e01\\u7ed9\\u624b\\u7eed\\u8d39\\u63a5\\u6536\\u8005\\n        if (feeAmount > 0) {\\n            _transfer(address(this), feeReceiver, feeAmount);\\n        }\\n\\n        emit TokenPurchased(msg.sender, usdtAmount, tokenAmount, stockPrice);\\n    }\\n\\n    /**\\n     * @dev \\u51fa\\u552e\\u80a1\\u7968\\u4ee3\\u5e01\\n     * @param tokenAmount \\u51fa\\u552e\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\n     * @param minUsdtAmount \\u6700\\u5c11\\u83b7\\u5f97\\u7684USDT\\u6570\\u91cf\\uff08\\u6ed1\\u70b9\\u4fdd\\u62a4\\uff09\\n     * @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n     */\\n    function sell(uint256 tokenAmount, uint256 minUsdtAmount, bytes[] calldata updateData) \\n        external \\n        payable\\n        nonReentrant \\n        whenNotPaused \\n    {\\n        require(tokenAmount > 0, \\\"Invalid token amount\\\");\\n        require(\\n            balanceOf(msg.sender) >= tokenAmount,\\n            \\\"Insufficient token balance\\\"\\n        );\\n\\n        // \\u66f4\\u65b0\\u5e76\\u83b7\\u53d6\\u6700\\u65b0\\u80a1\\u7968\\u4ef7\\u683c\\n        (uint256 stockPrice, , , ) = oracleAggregator.updateAndGetPrice{value: msg.value}(stockSymbol, updateData);\\n        require(stockPrice > 0, \\\"Invalid stock price\\\");\\n\\n        // \\ud83d\\udd25 \\u4fee\\u590d\\u4ef7\\u683c\\u8ba1\\u7b97\\u903b\\u8f91\\n        // tokenAmount: 18 decimals, stockPrice: 18 decimals, \\u76ee\\u6807: 6 decimals (USDT)\\n        uint256 usdtAmountBeforeFee = (tokenAmount * stockPrice) / 1e30;\\n        \\n        // \\u8ba1\\u7b97\\u624b\\u7eed\\u8d39\\n        uint256 feeAmount = (usdtAmountBeforeFee * tradeFeeRate) / 10000;\\n        uint256 usdtAmount = usdtAmountBeforeFee - feeAmount;\\n        \\n        // \\u6ed1\\u70b9\\u4fdd\\u62a4\\n        require(usdtAmount >= minUsdtAmount, \\\"Slippage too high\\\");\\n        require(usdtAmount >= minTradeAmount, \\\"Amount below minimum\\\");\\n\\n        // \\u68c0\\u67e5\\u5408\\u7ea6USDT\\u4f59\\u989d\\n        require(\\n            usdtToken.balanceOf(address(this)) >= usdtAmount + feeAmount,\\n            \\\"Insufficient USDT in contract\\\"\\n        );\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\u5230\\u5408\\u7ea6\\n        _transfer(msg.sender, address(this), tokenAmount);\\n\\n        // \\u8f6c\\u79fbUSDT\\u7ed9\\u7528\\u6237\\n        require(\\n            usdtToken.transfer(msg.sender, usdtAmount),\\n            \\\"USDT transfer failed\\\"\\n        );\\n        \\n        // \\u8f6c\\u79fb\\u624b\\u7eed\\u8d39USDT\\u7ed9\\u624b\\u7eed\\u8d39\\u63a5\\u6536\\u8005\\n        if (feeAmount > 0) {\\n            require(\\n                usdtToken.transfer(feeReceiver, feeAmount),\\n                \\\"Fee transfer failed\\\"\\n            );\\n        }\\n\\n        emit TokenSold(msg.sender, tokenAmount, usdtAmount, stockPrice);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u8d2d\\u4e70\\u9884\\u4f30\\uff08\\u5305\\u542b\\u624b\\u7eed\\u8d39\\u8ba1\\u7b97\\uff09\\n     * @notice \\u6b64\\u51fd\\u6570\\u4f7f\\u7528\\u7f13\\u5b58\\u4ef7\\u683c\\uff0c\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u4ef7\\u683c\\u3002\\u5efa\\u8bae\\u5728\\u5b9e\\u9645\\u4ea4\\u6613\\u524d\\u5148\\u8c03\\u7528buy\\u51fd\\u6570\\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\u3002\\n     */\\n    function getBuyEstimate(uint256 usdtAmount) \\n        external \\n        view \\n        returns (uint256 tokenAmount, uint256 feeAmount) \\n    {\\n        (uint256 stockPrice, , , ) = oracleAggregator.getPrice(stockSymbol);\\n        require(stockPrice > 0, \\\"Invalid stock price\\\");\\n        \\n        uint256 tokenAmountBeforeFee = (usdtAmount * 1e30) / stockPrice;\\n        feeAmount = (tokenAmountBeforeFee * tradeFeeRate) / 10000;\\n        tokenAmount = tokenAmountBeforeFee - feeAmount;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u51fa\\u552e\\u9884\\u4f30\\uff08\\u5305\\u542b\\u624b\\u7eed\\u8d39\\u8ba1\\u7b97\\uff09\\n     * @notice \\u6b64\\u51fd\\u6570\\u4f7f\\u7528\\u7f13\\u5b58\\u4ef7\\u683c\\uff0c\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u4ef7\\u683c\\u3002\\u5efa\\u8bae\\u5728\\u5b9e\\u9645\\u4ea4\\u6613\\u524d\\u5148\\u8c03\\u7528sell\\u51fd\\u6570\\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\u3002\\n     */\\n    function getSellEstimate(uint256 tokenAmount) \\n        external \\n        view \\n        returns (uint256 usdtAmount, uint256 feeAmount) \\n    {\\n        (uint256 stockPrice, , , ) = oracleAggregator.getPrice(stockSymbol);\\n        require(stockPrice > 0, \\\"Invalid stock price\\\");\\n        \\n        uint256 usdtAmountBeforeFee = (tokenAmount * stockPrice) / 1e30;\\n        feeAmount = (usdtAmountBeforeFee * tradeFeeRate) / 10000;\\n        usdtAmount = usdtAmountBeforeFee - feeAmount;\\n    }\\n\\n    // ========== \\u7ba1\\u7406\\u529f\\u80fd ==========\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u4ea4\\u6613\\u53c2\\u6570\\n     */\\n    function setTradeParameters(\\n        uint256 _minTradeAmount,\\n        uint256 _maxSlippage,\\n        uint256 _tradeFeeRate\\n    ) external onlyOwner {\\n        require(_maxSlippage <= 1000, \\\"Max slippage too high\\\"); // \\u6700\\u592710%\\n        require(_tradeFeeRate <= 1000, \\\"Trade fee too high\\\"); // \\u6700\\u592710%\\n        \\n        emit ParameterUpdated(\\\"minTradeAmount\\\", minTradeAmount, _minTradeAmount);\\n        emit ParameterUpdated(\\\"maxSlippage\\\", maxSlippage, _maxSlippage);\\n        emit ParameterUpdated(\\\"tradeFeeRate\\\", tradeFeeRate, _tradeFeeRate);\\n        \\n        minTradeAmount = _minTradeAmount;\\n        maxSlippage = _maxSlippage;\\n        tradeFeeRate = _tradeFeeRate;\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u624b\\u7eed\\u8d39\\u63a5\\u6536\\u5730\\u5740\\n     */\\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n        require(_feeReceiver != address(0), \\\"Invalid fee receiver\\\");\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /**\\n     * @dev \\u6682\\u505c/\\u6062\\u590d\\u5408\\u7ea6\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev \\u7d27\\u6025\\u63d0\\u53d6\\u529f\\u80fd\\n     */\\n    function emergencyWithdrawToken(uint256 amount) external onlyOwner {\\n        require(amount <= balanceOf(address(this)), \\\"Insufficient balance\\\");\\n        _transfer(address(this), owner(), amount);\\n        emit EmergencyWithdraw(address(this), owner(), amount);\\n    }\\n\\n    function emergencyWithdrawUSDT(uint256 amount) external onlyOwner {\\n        require(amount <= usdtToken.balanceOf(address(this)), \\\"Insufficient balance\\\");\\n        require(usdtToken.transfer(owner(), amount), \\\"Transfer failed\\\");\\n        emit EmergencyWithdraw(address(usdtToken), owner(), amount);\\n    }\\n\\n    // ========== \\u67e5\\u8be2\\u529f\\u80fd ==========\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u80a1\\u7968\\u4ef7\\u683c\\n     * @notice \\u6b64\\u51fd\\u6570\\u8fd4\\u56de\\u7f13\\u5b58\\u4ef7\\u683c\\uff0c\\u53ef\\u80fd\\u4e0d\\u662f\\u6700\\u65b0\\u4ef7\\u683c\\u3002\\u8981\\u83b7\\u53d6\\u6700\\u65b0\\u4ef7\\u683c\\uff0c\\u8bf7\\u4f7f\\u7528updateAndGetStockPrice\\u51fd\\u6570\\u3002\\n     */\\n    function getStockPrice() external view returns (uint256) {\\n        (uint256 price, , , ) = oracleAggregator.getPrice(stockSymbol);\\n        return price;\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u5e76\\u83b7\\u53d6\\u6700\\u65b0\\u80a1\\u7968\\u4ef7\\u683c\\n     * @param updateData \\u4ef7\\u683c\\u66f4\\u65b0\\u6570\\u636e\\n     * @return price \\u6700\\u65b0\\u80a1\\u7968\\u4ef7\\u683c\\n     * @return minPrice \\u6700\\u5c0f\\u4ef7\\u683c\\n     * @return maxPrice \\u6700\\u5927\\u4ef7\\u683c\\n     * @return publishTime \\u53d1\\u5e03\\u65f6\\u95f4\\n     */\\n    function updateAndGetStockPrice(bytes[] calldata updateData) \\n        external \\n        payable \\n        returns (uint256 price, uint256 minPrice, uint256 maxPrice, uint256 publishTime) \\n    {\\n        return oracleAggregator.updateAndGetPrice{value: msg.value}(stockSymbol, updateData);\\n    }\\n\\n    function getContractTokenBalance() external view returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function getContractUSDTBalance() external view returns (uint256) {\\n        return usdtToken.balanceOf(address(this));\\n    }\\n\\n    function getTradingInfo() external view returns (\\n        uint256 _minTradeAmount,\\n        uint256 _maxSlippage,\\n        uint256 _tradeFeeRate,\\n        address _feeReceiver,\\n        bool _paused\\n    ) {\\n        return (minTradeAmount, maxSlippage, tradeFeeRate, feeReceiver, paused());\\n    }\\n}\",\"keccak256\":\"0xdeda08ed94e894d8f9b820244a9ecd1c134eb93298d91bdbf95b68adbce2ea5e\",\"license\":\"MIT\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"./StockToken.sol\\\";\\n\\n// ===================== \\u4ee3\\u5e01\\u5de5\\u5382\\u5408\\u7ea6 (UUPS \\u53ef\\u5347\\u7ea7) =====================\\ncontract TokenFactory is Initializable, UUPSUpgradeable, OwnableUpgradeable {\\n    // \\u4ee3\\u5e01\\u7b26\\u53f7 => \\u4ee3\\u5e01\\u5408\\u7ea6\\u5730\\u5740\\n    mapping(string => address) public tokenBySymbol;\\n    \\n    // \\u6240\\u6709\\u4ee3\\u5e01\\u5730\\u5740\\u5217\\u8868\\n    address[] public allTokens;\\n    \\n    // \\u9884\\u8a00\\u673a\\u805a\\u5408\\u5668\\u5730\\u5740\\n    address public oracleAggregator;\\n    \\n    // StockToken \\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\n    address public stockTokenImplementation;\\n    \\n    // USDT \\u4ee3\\u5e01\\u5730\\u5740\\n    address public usdtTokenAddress;\\n    \\n    event TokenCreated(address indexed tokenAddress, string name, string symbol);\\n    event OracleUpdated(address newOracle);\\n    event ImplementationUpdated(address newImplementation);\\n    \\n    \\n    function initialize(address _oracleAggregator, address _stockTokenImplementation, address _usdtTokenAddress) initializer public {\\n        __Ownable_init(msg.sender);\\n        __UUPSUpgradeable_init();\\n        oracleAggregator = _oracleAggregator;\\n        stockTokenImplementation = _stockTokenImplementation;\\n        usdtTokenAddress = _usdtTokenAddress;\\n    }\\n    \\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n    \\n    // \\u521b\\u5efa\\u65b0\\u4ee3\\u5e01\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply\\n    ) external onlyOwner returns (address) {\\n        require(bytes(name).length > 0, \\\"Token name cannot be empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Token symbol cannot be empty\\\");\\n        require(initialSupply > 0, \\\"Initial supply must be greater than 0\\\");\\n        require(tokenBySymbol[symbol] == address(0), \\\"Token already exists\\\");\\n        require(stockTokenImplementation != address(0), \\\"Implementation not set\\\");\\n        require(usdtTokenAddress != address(0), \\\"USDT token address not set\\\");\\n        \\n        // \\u51c6\\u5907\\u521d\\u59cb\\u5316\\u6570\\u636e\\n        bytes memory initData = abi.encodeCall(\\n            StockToken.initialize,\\n            (name, symbol, initialSupply, msg.sender, oracleAggregator, usdtTokenAddress)\\n        );\\n        \\n        // \\u4f7f\\u7528\\u4ee3\\u7406\\u6a21\\u5f0f\\u521b\\u5efa\\u65b0\\u7684 StockToken \\u5b9e\\u4f8b\\n        ERC1967Proxy proxy = new ERC1967Proxy(stockTokenImplementation, initData);\\n        address tokenAddress = address(proxy);\\n        \\n        tokenBySymbol[symbol] = tokenAddress;\\n        allTokens.push(tokenAddress);\\n        \\n        emit TokenCreated(tokenAddress, name, symbol);\\n        return tokenAddress;\\n    }\\n    \\n    // \\u83b7\\u53d6\\u4ee3\\u5e01\\u5730\\u5740\\n    function getTokenAddress(string memory symbol) external view returns (address) {\\n        return tokenBySymbol[symbol];\\n    }\\n    \\n    // \\u83b7\\u53d6\\u6240\\u6709\\u4ee3\\u5e01\\n    function getAllTokens() external view returns (address[] memory) {\\n        return allTokens;\\n    }\\n    \\n    // \\u66f4\\u65b0\\u9884\\u8a00\\u673a\\u5730\\u5740\\n    function setOracleAggregator(address newOracle) external onlyOwner {\\n        require(newOracle != address(0), \\\"Invalid oracle address\\\");\\n        oracleAggregator = newOracle;\\n        emit OracleUpdated(newOracle);\\n    }\\n    \\n    // \\u8bbe\\u7f6e StockToken \\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\n    function setStockTokenImplementation(address newImplementation) external onlyOwner {\\n        require(newImplementation != address(0), \\\"Invalid implementation address\\\");\\n        stockTokenImplementation = newImplementation;\\n        emit ImplementationUpdated(newImplementation);\\n    }\\n    \\n    // \\u8bbe\\u7f6e USDT \\u4ee3\\u5e01\\u5730\\u5740\\n    function setUSDTTokenAddress(address newUSDTTokenAddress) external onlyOwner {\\n        require(newUSDTTokenAddress != address(0), \\\"Invalid USDT token address\\\");\\n        usdtTokenAddress = newUSDTTokenAddress;\\n    }\\n}\",\"keccak256\":\"0xd18c71b4a5fbb543ee4666b14ad106f4ab1d2d0074f540126a1c3025502b04e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516119e161003e60003960008181610c7a01528181610ca40152610e5701526119e16000f3fe6080604052600436106200011f5760003560e01c80638dffe3f411620000a1578063b3a842ff116200006c578063b3a842ff146200033b578063c0c53b8b1462000380578063c409123614620003a5578063f1ab341514620003ca578063f2fde38b14620003ef57600080fd5b80638dffe3f414620002905780639d741e5d14620002b2578063a8940d3914620002d4578063ad3cb1cc14620002f957600080fd5b806352d1902d11620000ee57806352d1902d14620001c85780635b06053014620001ef578063634282af1462000214578063715018a614620002395780638da5cb5b146200025157600080fd5b8063263bcc7914620001245780632a5c792a14620001635780634f1ef286146200018a57806352173ba814620001a3575b600080fd5b3480156200013157600080fd5b5060035462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200017057600080fd5b506200017b62000414565b6040516200015a919062001176565b620001a16200019b36600462001275565b62000478565b005b348015620001b057600080fd5b50620001a1620001c2366004620012de565b6200049d565b348015620001d557600080fd5b50620001e062000525565b6040519081526020016200015a565b348015620001fc57600080fd5b50620001466200020e3660046200131f565b62000545565b3480156200022157600080fd5b50620001466200023336600462001393565b620008f4565b3480156200024657600080fd5b50620001a16200091f565b3480156200025e57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031662000146565b3480156200029d57600080fd5b5060025462000146906001600160a01b031681565b348015620002bf57600080fd5b5060045462000146906001600160a01b031681565b348015620002e157600080fd5b50620001a1620002f3366004620012de565b62000937565b3480156200030657600080fd5b506200032c604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516200015a919062001401565b3480156200034857600080fd5b50620001466200035a36600462001416565b80516020818301810180516000825292820191909301209152546001600160a01b031681565b3480156200038d57600080fd5b50620001a16200039f36600462001457565b620009ee565b348015620003b257600080fd5b5062000146620003c436600462001416565b62000b4f565b348015620003d757600080fd5b50620001a1620003e9366004620012de565b62000b81565b348015620003fc57600080fd5b50620001a16200040e366004620012de565b62000c2b565b606060018054806020026020016040519081016040528092919081815260200182805480156200046e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200044f575b5050505050905090565b6200048262000c6f565b6200048d8262000d18565b62000499828262000d22565b5050565b620004a762000dee565b6001600160a01b038116620005035760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964205553445420746f6b656e206164647265737300000000000060448201526064015b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006200053162000e4c565b506000805160206200198c83398151915290565b60006200055162000dee565b6000845111620005a45760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e616d652063616e6e6f7420626520656d7074790000000000006044820152606401620004fa565b6000835111620005f75760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e2073796d626f6c2063616e6e6f7420626520656d707479000000006044820152606401620004fa565b60008211620006575760405162461bcd60e51b815260206004820152602560248201527f496e697469616c20737570706c79206d75737420626520677265617465722074604482015264068616e20360dc1b6064820152608401620004fa565b60006001600160a01b0316600084604051620006749190620014a1565b908152604051908190036020019020546001600160a01b031614620006d35760405162461bcd60e51b8152602060048201526014602482015273546f6b656e20616c72656164792065786973747360601b6044820152606401620004fa565b6003546001600160a01b0316620007265760405162461bcd60e51b8152602060048201526016602482015275125b5c1b195b595b9d185d1a5bdb881b9bdd081cd95d60521b6044820152606401620004fa565b6004546001600160a01b0316620007805760405162461bcd60e51b815260206004820152601a60248201527f5553445420746f6b656e2061646472657373206e6f74207365740000000000006044820152606401620004fa565b600254600454604051600092620007b29288928892889233926001600160a01b039283169290911690602401620014bf565b60408051601f198184030181529181526020820180516001600160e01b0316631bbdd89b60e21b17905260035490519192506000916001600160a01b03909116908390620008009062001168565b6200080d92919062001519565b604051809103906000f0801580156200082a573d6000803e3d6000fd5b509050600081905080600087604051620008459190620014a1565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319918216179091556001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805493851693909116831790557fffc04f682c7b287e4b552dacd4b833d7c33dc0549cd6da84388408e4830c056290620008e0908a908a906200153f565b60405180910390a2925050505b9392505050565b600181815481106200090557600080fd5b6000918252602090912001546001600160a01b0316905081565b6200092962000dee565b62000935600062000e96565b565b6200094162000dee565b6001600160a01b038116620009995760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420696d706c656d656e746174696f6e206164647265737300006044820152606401620004fa565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f310ba5f1d2ed074b51e2eccd052a47ae9ab7c6b800d1fca3db3999d6a592ca03906020015b60405180910390a150565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801562000a355750825b905060008267ffffffffffffffff16600114801562000a535750303b155b90508115801562000a62575080155b1562000a815760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831562000aac57845460ff60401b1916600160401b1785555b62000ab73362000f07565b62000ac162000f1c565b600280546001600160a01b03808b166001600160a01b031992831617909255600380548a84169083161790556004805492891692909116919091179055831562000b4557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6000808260405162000b629190620014a1565b908152604051908190036020019020546001600160a01b031692915050565b62000b8b62000dee565b6001600160a01b03811662000bdc5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206f7261636c65206164647265737360501b6044820152606401620004fa565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f3df77beb5db05fcdd70a30fc8adf3f83f9501b68579455adbd100b818094039490602001620009e3565b62000c3562000dee565b6001600160a01b03811662000c6157604051631e4fbdf760e01b815260006004820152602401620004fa565b62000c6c8162000e96565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148062000cf957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000ced6000805160206200198c833981519152546001600160a01b031690565b6001600160a01b031614155b15620009355760405163703e46dd60e11b815260040160405180910390fd5b62000c6c62000dee565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000d7f575060408051601f3d908101601f1916820190925262000d7c9181019062001568565b60015b62000da957604051634c9c8ce360e01b81526001600160a01b0383166004820152602401620004fa565b6000805160206200198c833981519152811462000ddd57604051632a87526960e21b815260048101829052602401620004fa565b62000de9838362000f26565b505050565b3362000e217f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614620009355760405163118cdaa760e01b8152336004820152602401620004fa565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009355760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b62000f1162000f83565b62000c6c8162000fcd565b6200093562000f83565b62000f318262000fd7565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511562000f795762000de982826200103f565b62000499620010bb565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166200093557604051631afcd79f60e31b815260040160405180910390fd5b62000c3562000f83565b806001600160a01b03163b6000036200100f57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401620004fa565b6000805160206200198c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516200105e9190620014a1565b600060405180830381855af49150503d80600081146200109b576040519150601f19603f3d011682016040523d82523d6000602084013e620010a0565b606091505b5091509150620010b2858383620010db565b95945050505050565b3415620009355760405163b398979f60e01b815260040160405180910390fd5b606082620010f457620010ee826200113f565b620008ed565b81511580156200110c57506001600160a01b0384163b155b156200113757604051639996b31560e01b81526001600160a01b0385166004820152602401620004fa565b5080620008ed565b8051156200114f57805160208201fd5b60405163d6bda27560e01b815260040160405180910390fd5b610409806200158383390190565b6020808252825182820181905260009190848201906040850190845b81811015620011b95783516001600160a01b03168352928401929184019160010162001192565b50909695505050505050565b80356001600160a01b0381168114620011dd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115620012165762001216620011e2565b604051601f8501601f19908116603f01168101908282118183101715620012415762001241620011e2565b816040528093508581528686860111156200125b57600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156200128957600080fd5b6200129483620011c5565b9150602083013567ffffffffffffffff811115620012b157600080fd5b8301601f81018513620012c357600080fd5b620012d485823560208401620011f8565b9150509250929050565b600060208284031215620012f157600080fd5b620008ed82620011c5565b600082601f8301126200130e57600080fd5b620008ed83833560208501620011f8565b6000806000606084860312156200133557600080fd5b833567ffffffffffffffff808211156200134e57600080fd5b6200135c87838801620012fc565b945060208601359150808211156200137357600080fd5b506200138286828701620012fc565b925050604084013590509250925092565b600060208284031215620013a657600080fd5b5035919050565b60005b83811015620013ca578181015183820152602001620013b0565b50506000910152565b60008151808452620013ed816020860160208601620013ad565b601f01601f19169290920160200192915050565b602081526000620008ed6020830184620013d3565b6000602082840312156200142957600080fd5b813567ffffffffffffffff8111156200144157600080fd5b6200144f84828501620012fc565b949350505050565b6000806000606084860312156200146d57600080fd5b6200147884620011c5565b92506200148860208501620011c5565b91506200149860408501620011c5565b90509250925092565b60008251620014b5818460208701620013ad565b9190910192915050565b60c081526000620014d460c0830189620013d3565b8281036020840152620014e88189620013d3565b604084019790975250506001600160a01b039384166060820152918316608083015290911660a09091015292915050565b6001600160a01b03831681526040602082018190526000906200144f90830184620013d3565b604081526000620015546040830185620013d3565b8281036020840152620010b28185620013d3565b6000602082840312156200157b57600080fd5b505191905056fe608060405260405161040938038061040983398101604081905261002291610267565b61002c8282610033565b5050610351565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b9190610335565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b80511561021457805160208201fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025e578181015183820152602001610246565b50506000910152565b6000806040838503121561027a57600080fd5b82516001600160a01b038116811461029157600080fd5b60208401519092506001600160401b03808211156102ae57600080fd5b818501915085601f8301126102c257600080fd5b8151818111156102d4576102d461022d565b604051601f8201601f19908116603f011681019083821181831017156102fc576102fc61022d565b8160405282815288602084870101111561031557600080fd5b610326836020830160208801610243565b80955050505050509250929050565b60008251610347818460208701610243565b9190910192915050565b60aa8061035f6000396000f3fe6080604052600a600c565b005b60186014601a565b6051565b565b6000604c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e808015606f573d6000f35b3d6000fdfea26469706673582212202e1b19a91c419a61dca383dfcb3f2e420034a4a33aa4e8071eb48225765a45e864736f6c63430008160033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220c87bfa71ddf225c91ec285dae40cd5d5b3025735d066d84ca85c26b3b9138f1a64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106200011f5760003560e01c80638dffe3f411620000a1578063b3a842ff116200006c578063b3a842ff146200033b578063c0c53b8b1462000380578063c409123614620003a5578063f1ab341514620003ca578063f2fde38b14620003ef57600080fd5b80638dffe3f414620002905780639d741e5d14620002b2578063a8940d3914620002d4578063ad3cb1cc14620002f957600080fd5b806352d1902d11620000ee57806352d1902d14620001c85780635b06053014620001ef578063634282af1462000214578063715018a614620002395780638da5cb5b146200025157600080fd5b8063263bcc7914620001245780632a5c792a14620001635780634f1ef286146200018a57806352173ba814620001a3575b600080fd5b3480156200013157600080fd5b5060035462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200017057600080fd5b506200017b62000414565b6040516200015a919062001176565b620001a16200019b36600462001275565b62000478565b005b348015620001b057600080fd5b50620001a1620001c2366004620012de565b6200049d565b348015620001d557600080fd5b50620001e062000525565b6040519081526020016200015a565b348015620001fc57600080fd5b50620001466200020e3660046200131f565b62000545565b3480156200022157600080fd5b50620001466200023336600462001393565b620008f4565b3480156200024657600080fd5b50620001a16200091f565b3480156200025e57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031662000146565b3480156200029d57600080fd5b5060025462000146906001600160a01b031681565b348015620002bf57600080fd5b5060045462000146906001600160a01b031681565b348015620002e157600080fd5b50620001a1620002f3366004620012de565b62000937565b3480156200030657600080fd5b506200032c604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516200015a919062001401565b3480156200034857600080fd5b50620001466200035a36600462001416565b80516020818301810180516000825292820191909301209152546001600160a01b031681565b3480156200038d57600080fd5b50620001a16200039f36600462001457565b620009ee565b348015620003b257600080fd5b5062000146620003c436600462001416565b62000b4f565b348015620003d757600080fd5b50620001a1620003e9366004620012de565b62000b81565b348015620003fc57600080fd5b50620001a16200040e366004620012de565b62000c2b565b606060018054806020026020016040519081016040528092919081815260200182805480156200046e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200044f575b5050505050905090565b6200048262000c6f565b6200048d8262000d18565b62000499828262000d22565b5050565b620004a762000dee565b6001600160a01b038116620005035760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964205553445420746f6b656e206164647265737300000000000060448201526064015b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006200053162000e4c565b506000805160206200198c83398151915290565b60006200055162000dee565b6000845111620005a45760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e616d652063616e6e6f7420626520656d7074790000000000006044820152606401620004fa565b6000835111620005f75760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e2073796d626f6c2063616e6e6f7420626520656d707479000000006044820152606401620004fa565b60008211620006575760405162461bcd60e51b815260206004820152602560248201527f496e697469616c20737570706c79206d75737420626520677265617465722074604482015264068616e20360dc1b6064820152608401620004fa565b60006001600160a01b0316600084604051620006749190620014a1565b908152604051908190036020019020546001600160a01b031614620006d35760405162461bcd60e51b8152602060048201526014602482015273546f6b656e20616c72656164792065786973747360601b6044820152606401620004fa565b6003546001600160a01b0316620007265760405162461bcd60e51b8152602060048201526016602482015275125b5c1b195b595b9d185d1a5bdb881b9bdd081cd95d60521b6044820152606401620004fa565b6004546001600160a01b0316620007805760405162461bcd60e51b815260206004820152601a60248201527f5553445420746f6b656e2061646472657373206e6f74207365740000000000006044820152606401620004fa565b600254600454604051600092620007b29288928892889233926001600160a01b039283169290911690602401620014bf565b60408051601f198184030181529181526020820180516001600160e01b0316631bbdd89b60e21b17905260035490519192506000916001600160a01b03909116908390620008009062001168565b6200080d92919062001519565b604051809103906000f0801580156200082a573d6000803e3d6000fd5b509050600081905080600087604051620008459190620014a1565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319918216179091556001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805493851693909116831790557fffc04f682c7b287e4b552dacd4b833d7c33dc0549cd6da84388408e4830c056290620008e0908a908a906200153f565b60405180910390a2925050505b9392505050565b600181815481106200090557600080fd5b6000918252602090912001546001600160a01b0316905081565b6200092962000dee565b62000935600062000e96565b565b6200094162000dee565b6001600160a01b038116620009995760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420696d706c656d656e746174696f6e206164647265737300006044820152606401620004fa565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f310ba5f1d2ed074b51e2eccd052a47ae9ab7c6b800d1fca3db3999d6a592ca03906020015b60405180910390a150565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801562000a355750825b905060008267ffffffffffffffff16600114801562000a535750303b155b90508115801562000a62575080155b1562000a815760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831562000aac57845460ff60401b1916600160401b1785555b62000ab73362000f07565b62000ac162000f1c565b600280546001600160a01b03808b166001600160a01b031992831617909255600380548a84169083161790556004805492891692909116919091179055831562000b4557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6000808260405162000b629190620014a1565b908152604051908190036020019020546001600160a01b031692915050565b62000b8b62000dee565b6001600160a01b03811662000bdc5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206f7261636c65206164647265737360501b6044820152606401620004fa565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f3df77beb5db05fcdd70a30fc8adf3f83f9501b68579455adbd100b818094039490602001620009e3565b62000c3562000dee565b6001600160a01b03811662000c6157604051631e4fbdf760e01b815260006004820152602401620004fa565b62000c6c8162000e96565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148062000cf957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000ced6000805160206200198c833981519152546001600160a01b031690565b6001600160a01b031614155b15620009355760405163703e46dd60e11b815260040160405180910390fd5b62000c6c62000dee565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000d7f575060408051601f3d908101601f1916820190925262000d7c9181019062001568565b60015b62000da957604051634c9c8ce360e01b81526001600160a01b0383166004820152602401620004fa565b6000805160206200198c833981519152811462000ddd57604051632a87526960e21b815260048101829052602401620004fa565b62000de9838362000f26565b505050565b3362000e217f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614620009355760405163118cdaa760e01b8152336004820152602401620004fa565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009355760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b62000f1162000f83565b62000c6c8162000fcd565b6200093562000f83565b62000f318262000fd7565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511562000f795762000de982826200103f565b62000499620010bb565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166200093557604051631afcd79f60e31b815260040160405180910390fd5b62000c3562000f83565b806001600160a01b03163b6000036200100f57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401620004fa565b6000805160206200198c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516200105e9190620014a1565b600060405180830381855af49150503d80600081146200109b576040519150601f19603f3d011682016040523d82523d6000602084013e620010a0565b606091505b5091509150620010b2858383620010db565b95945050505050565b3415620009355760405163b398979f60e01b815260040160405180910390fd5b606082620010f457620010ee826200113f565b620008ed565b81511580156200110c57506001600160a01b0384163b155b156200113757604051639996b31560e01b81526001600160a01b0385166004820152602401620004fa565b5080620008ed565b8051156200114f57805160208201fd5b60405163d6bda27560e01b815260040160405180910390fd5b610409806200158383390190565b6020808252825182820181905260009190848201906040850190845b81811015620011b95783516001600160a01b03168352928401929184019160010162001192565b50909695505050505050565b80356001600160a01b0381168114620011dd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115620012165762001216620011e2565b604051601f8501601f19908116603f01168101908282118183101715620012415762001241620011e2565b816040528093508581528686860111156200125b57600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156200128957600080fd5b6200129483620011c5565b9150602083013567ffffffffffffffff811115620012b157600080fd5b8301601f81018513620012c357600080fd5b620012d485823560208401620011f8565b9150509250929050565b600060208284031215620012f157600080fd5b620008ed82620011c5565b600082601f8301126200130e57600080fd5b620008ed83833560208501620011f8565b6000806000606084860312156200133557600080fd5b833567ffffffffffffffff808211156200134e57600080fd5b6200135c87838801620012fc565b945060208601359150808211156200137357600080fd5b506200138286828701620012fc565b925050604084013590509250925092565b600060208284031215620013a657600080fd5b5035919050565b60005b83811015620013ca578181015183820152602001620013b0565b50506000910152565b60008151808452620013ed816020860160208601620013ad565b601f01601f19169290920160200192915050565b602081526000620008ed6020830184620013d3565b6000602082840312156200142957600080fd5b813567ffffffffffffffff8111156200144157600080fd5b6200144f84828501620012fc565b949350505050565b6000806000606084860312156200146d57600080fd5b6200147884620011c5565b92506200148860208501620011c5565b91506200149860408501620011c5565b90509250925092565b60008251620014b5818460208701620013ad565b9190910192915050565b60c081526000620014d460c0830189620013d3565b8281036020840152620014e88189620013d3565b604084019790975250506001600160a01b039384166060820152918316608083015290911660a09091015292915050565b6001600160a01b03831681526040602082018190526000906200144f90830184620013d3565b604081526000620015546040830185620013d3565b8281036020840152620010b28185620013d3565b6000602082840312156200157b57600080fd5b505191905056fe608060405260405161040938038061040983398101604081905261002291610267565b61002c8282610033565b5050610351565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b9190610335565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b80511561021457805160208201fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025e578181015183820152602001610246565b50506000910152565b6000806040838503121561027a57600080fd5b82516001600160a01b038116811461029157600080fd5b60208401519092506001600160401b03808211156102ae57600080fd5b818501915085601f8301126102c257600080fd5b8151818111156102d4576102d461022d565b604051601f8201601f19908116603f011681019083821181831017156102fc576102fc61022d565b8160405282815288602084870101111561031557600080fd5b610326836020830160208801610243565b80955050505050509250929050565b60008251610347818460208701610243565b9190910192915050565b60aa8061035f6000396000f3fe6080604052600a600c565b005b60186014601a565b6051565b565b6000604c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e808015606f573d6000f35b3d6000fdfea26469706673582212202e1b19a91c419a61dca383dfcb3f2e420034a4a33aa4e8071eb48225765a45e864736f6c63430008160033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220c87bfa71ddf225c91ec285dae40cd5d5b3025735d066d84ca85c26b3b9138f1a64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5749,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "tokenBySymbol",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 5752,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "allTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5754,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "oracleAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5756,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "stockTokenImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5758,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "usdtTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}